# GodMode Codebase Extraction

Repository path: /Users/raka/Desktop/WORK/PROJECTS/Prompt-you/Prompt-you/GodMode-main-2
Extraction date: 2025-04-27 04:16:33



================================================================================
FILE: CODE_OF_CONDUCT.md
================================================================================

# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, sex characteristics, gender identity and expression,
level of experience, education, socio-economic status, nationality, personal
appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment
include:

- Using welcoming and inclusive language
- Being respectful of differing viewpoints and experiences
- Gracefully accepting constructive criticism
- Focusing on what is best for the community
- Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

- The use of sexualized language or imagery and unwelcome sexual attention or
  advances
- Trolling, insulting/derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or electronic
  address, without explicit permission
- Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at electronreactboilerplate@gmail.com. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see
https://www.contributor-covenant.org/faq


================================================================================
FILE: tailwind.config.js
================================================================================

const colors = require('tailwindcss/colors');

module.exports = {
	content: [
		'./src/renderer/**/*.{js,jsx,ts,tsx,ejs}',
		'./src/components/**/*.{js,jsx,ts,tsx,ejs}',
	],
	darkMode: 'media', // or 'class'
	theme: {
		extend: {
			colors: {
				sky: colors.sky,
				cyan: colors.cyan,
			},
		},
	},
	variants: {
		extend: {},
	},
	plugins: [],
};


================================================================================
FILE: README.md
================================================================================

# 🐣 GodMode - the smol AI Chat Browser

This is a dedicated chat browser that only does one thing: help you quickly access **the full webapps** of ChatGPT, Claude 2, Perplexity, Bing and more **with a single keyboard shortcut (Cmd+Shift+G)**.

![image](https://github.com/smol-ai/GodMode/assets/6764957/90f4bab4-e406-4507-b37e-8c8d80d18f15)

([click for video](https://twitter.com/swyx/status/1692988634364871032))

Whatever is typed at the bottom is entered into all **web apps** simultaneously, however if you wish to explore one further than the other you can do so independently since they are just webviews.

## Installation

**Install [here](https://github.com/smol-ai/GodMode/releases/latest)!** And then log in to Google on any one of the providers + refreshing logs you into most of the rest.
Google Bard seems to have weird auth requirements [we havent figured out yet](https://github.com/smol-ai/GodMode/issues/201) - logging into Google via Anthropic Claude first seems to be the most reliable right now while we figure it out.

Download:

- Arm64 for Apple Silicon Macs, non Arm64 (universal) for Intel Macs.
- We [just added Windows/Linux support](https://github.com/smol-ai/GodMode/pull/162), but it needs a lot of work. Help wanted!

You can also build from source, see instructions below.

## Mixture of Mixture of Experts

It's well discussed by now that [GPT4 is a mixture of experts model](https://twitter.com/swyx/status/1671272883379908608), which explains its great advancement over GPT3 while not sacrificing speed. It stands to reason that if you can run one chat and get results from all the top closed/open source models, you will get that much more diversity in results for what you seek. As a side benefit, we will add opt-in data submission soon so we can crowdsource statistics on win rates, niche advantages, and show them over time.

> “That's why it's always worth having a few philosophers around the place. One minute it's all is truth beauty and is beauty truth, and does a falling tree in the forest make a sound if there's no one there to hear it, and then just when you think they're going to start dribbling one of 'em says, incidentally, putting a thirty-foot parabolic reflector on a high place to shoot the rays of the sun at an enemy's ships would be a very interesting demonstration of optical principles.”
>
> ― [Terry Pratchett, Small Gods](https://www.goodreads.com/work/quotes/1636629-small-gods)

## Oh so this is like nat.dev?

Yes and no:

1. SOTA functionality is often released without API (eg: ChatGPT Code Interpreter, Bing Image Creator, Bard Multimodal Input, Claude Multifile Upload). **We insist on using webapps** so that you have full access to all functionality on launch day. We also made light/dark mode for each app, just for fun (`Cmd+Shift+L` (Aug update: currently broken in the GodMode rewrite, will fix))
2. This is a **secondary browser** that can be pulled up with a keyboard shortcut (`Cmd+Shift+G`, customizable). Feels a LOT faster than having it live in a browser window somewhere and is easy to pull up/dismiss during long generations.
3. Supports no-API models like Perplexity and Poe, and local models like LLaMa and Vicuna (via [OobaBooga](https://github.com/oobabooga/text-generation-webui)).
4. No paywall, build from source.
5. Fancy new features like PromptCritic (AI assisted prompt improvement)

## Supported LLM Providers

| Provider (default in **bold**)                                                          | Notes                                                                                                                                                                    |
| --------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| **ChatGPT**                                                                             | Defaults to "[GPT4.5](https://www.latent.space/p/code-interpreter#details)"!                                                                                             |
| **Claude 2**                                                                            | Excellent, long context, multi document, fast model.                                                                                                                     |
| **Perplexity**                                                                          | The login is finnicky - login to Google on any of the other chats, and then reload (cmd+R) - it'll auto login. Hopefully they make it more intuitive/reliable in future. |
| **Bing**                                                                                | Microsoft's best. [It's not the same as GPT-4!](https://twitter.com/jeremyphoward/status/1666593682676662272?s=20). We could use help normalizing its styling.           |
| Bard                                                                                    | Google's best. [Bard's updates are... flaky](https://twitter.com/swyx/status/1678495067663925248)                                                                        |
| Llama2 via Perplexity                                                                   | Simple model host. Can run [the latest CodeLlama 34B model](https://twitter.com/swyx/status/1694870138984747449?s=20)! try it!                                           |
| Llama2 via Lepton.ai                                                                    | Simple model host. Is very [fast](https://twitter.com/rauchg/status/1692638409230094644)                                                                                 |
| Quora Poe                                                                               | Great at answering general knowledge questions                                                                                                                           |
| Inflection Pi                                                                           | Very unique long-memory clean conversation style                                                                                                                         |
| You.com Chat                                                                            | great search + chat answers, one of the first                                                                                                                            |
| HuggingChat                                                                             | Simple model host. Offers Llama2, OpenAssistant                                                                                                                          |
| Vercel Chat                                                                             | Simple open source chat wrapper for GPT3 API                                                                                                                             |
| Local/GGML Models (via [OobaBooga](https://github.com/oobabooga/text-generation-webui)) | Requires Local Setup, see oobabooga docs                                                                                                                                 |
| Phind                                                                                   | Developer focused chat with [finetuned CodeLlama](https://www.phind.com/blog/code-llama-beats-gpt4)                                                                      |
| Stable Chat                                                                             | Chat interface for [Stable Beluga](https://stability.ai/blog/stable-beluga-large-instruction-fine-tuned-models), an open LLM by Stability AI.                            |
| [OpenRouter](https://openrouter.ai)                                                     | Access GPT4, Claude, PaLM, and open source models                                                                                                                        |
| OpenAssistant                                                                           | Coming Soon — [Submit a PR](https://github.com/smol-ai/GodMode/issues/37)!                                                                                               |
| Claude 1                                                                                | Requires Beta Access                                                                                                                                                     |
| ... What Else?                                                                          | [Submit a New Issue](https://github.com/smol-ai/GodMode/issues)!                                                                                                         |

## Features and Usage

- **Keyboard Shortcuts**:

  - Use `Cmd+Shift+G` for quick open and `Cmd+Enter` to submit.
  - Customize these shortcuts (thanks [@davej](https://github.com/smol-ai/GodMode/pull/85)!):
    - Quick Open
      - ![image](https://github.com/davej/smol-ai-menubar/assets/6764957/3a6d0a16-7f54-43e5-9060-ec7b2486d32d)
    - Submit can be toggled to use `Enter` (faster for quick chat replies) vs `Cmd+Enter` (easier to enter multiline prompts)
  - `Cmd+Shift+L` to toggle light/dark mode (not customizable for now)
  - Remember you can customize further by building from source!

- **Pane Resizing and Rearranging**:

  - Resize the panes by clicking and dragging.
  - Use `Cmd+1/2/3` to pop out individual webviews
  - Use `Cmd +/-` to zoom in/out globally
  - open up the panel on the bottom right to reorder panes or reset them to default
  - `Cmd p` to pin/unpin the window Always on Top

- **Model Toggle**:

  - Enable/disable providers by accessing the context menu. The choice is saved for future sessions.
  - Supported models: ChatGPT, Bing, Bard, Claude 1/2, and more (see Supported LLM Providers above)

- **Support for oobabooga/text-generation-webui**:

  - Initial support for [oobabooga/text-generation-webui](https://github.com/oobabooga/text-generation-webui) has been added.
  - Users need to follow the process outlined in the text-generation-webui repository, including downloading models (e.g. [LLaMa-13B-GGML](https://huggingface.co/TheBloke/LLaMa-13B-GGML/blob/main/llama-13b.ggmlv3.q4_0.bin), or [GPT4-x-alpaca](https://www.youtube.com/watch?v=nVC9D9fRyNU)).
  - Run the model on `http://127.0.0.1:7860/` before running it inside of the smol GodMode browser.
  - The UI only supports one kind of prompt template. Contributions are welcome to make the templating customizable (see the Oobabooga.js provider).

- **Starting New Conversations**:

  - Use `Cmd+R` to start a new conversation with a simple window refresh.

- **Prompt Critic**: Uses Llama 2 to improve your prompting when you want it!

## video demo

- original version https://youtu.be/jrlxT1K4LEU
- Jun 1 version https://youtu.be/ThfFFgG-AzE
- https://twitter.com/swyx/status/1658403625717338112
- https://twitter.com/swyx/status/1663290955804360728?s=20
- July 11 version https://twitter.com/swyx/status/1678944036135260160
- Aug 19 godmode rewrite https://twitter.com/swyx/status/1692988634364871032

## Download and Setup

You can:

- download the precompiled binaries: https://github.com/smol-ai/GodMode/releases/latest (sometimes Apple/Windows marks these as untrusted/damaged, just open them up in Applications and right-click-open to run it).
  - for Macs, you can use the "-universal.dmg" versions and it will choose between Apple Silicon/Intel architectures. We recommend installing this, but just fyi:
    - Apple Silicon M1/M2 macs use the "arm64" version
    - Intel Macs use the ".dmg" versions with no "arm64"
  - for Windows, use ".exe" version. It will be marked as untrusted for now as we haven't done Windows codesigning yet
  - for Linux, use ".AppImage".
  - for Arch Linux, there is a [third party](https://github.com/smol-ai/GodMode/issues/47) AUR package: aur.archlinux.org/packages/godmode
- Or run it from source (instructions below)

When you first run the app:

1. log into your Google account (once you log into your google account for chatgpt, you'l also be logged in to Bard, Perplexity, Anthropic, etc). logging into Google via Anthropic Claude first seems to be the most reliable right now while we figure it out
2. For Bing, after you log in to your Microsoft account, you'll need to refresh to get into the Bing Chat screen. It's a little finnicky at first try but it works.

Optional: You can have GodMode start up automatically on login - just go to Settings and toggle it on. Thanks [@leeknowlton](https://github.com/smol-ai/GodMode/pull/188)!

![image](https://github.com/smol-ai/GodMode/assets/6764957/99c3426f-d306-469c-98fb-88c80fb12a41)

## seeking contributors!

please see https://github.com/smol-ai/GodMode/blob/main/CONTRIBUTING.md

## build from source

If you want to build from source, you will need to clone the repo and open the project folder:

1. Clone the repository and navigate to the project folder:

   ```bash
   git clone https://github.com/smol-ai/GodMode.git
   cd GodMode
   npm install --force
   npm run start # to run in development, locally
   ```

2. Generate binaries:

   ```bash
   npm run package # https://electron-react-boilerplate.js.org/docs/packaging
   # ts-node scripts/clean.js dist clears the webpackPaths.distPath, webpackPaths.buildPath, webpackPaths.dllPath
   # npm run build outputs to /release/app/dist/main
   # electron-builder build --publish never builds and code signs the app.

   # this is mostly for swyx to publish the official codesigned and notarized releases
   ```

   The outputs will be located in the `/release/build` directory.

## Related project

I only later heard about https://github.com/sunner/ChatALL which is cool but I think defaulting to a menbuar/webview experience is better - you get to use full features like Code Interpreter and Claude 2 file upload when they come out, without waiting for API


================================================================================
FILE: .prettierrc.json
================================================================================

{
	"singleQuote": true,
	"useTabs": true
}


================================================================================
FILE: package.json
================================================================================

{
	"name": "godmode",
	"productName": "GodMode",
	"version": "1.0.0-beta.9",
	"author": "smol-ai",
	"description": "Simultaneously chat with ChatGPT, Claude, Bing, Bard, Llama2, et al in a full chat browser, NO API",
	"main": "src/main/main.ts",
	"scripts": {
		"build": "npm run build:copy && concurrently \"npm run build:main\" \"npm run build:renderer\"",
		"build:copy": "node scripts/scripts/copy-version-number.js",
		"build:main": "cross-env NODE_ENV=production TS_NODE_TRANSPILE_ONLY=true webpack --config ./scripts/configs/webpack.config.main.prod.ts",
		"build:renderer": "cross-env NODE_ENV=production TS_NODE_TRANSPILE_ONLY=true webpack --config ./scripts/configs/webpack.config.renderer.prod.ts",
		"postinstall": "ts-node scripts/scripts/check-native-dep.js && electron-builder install-app-deps && cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --config ./scripts/configs/webpack.config.renderer.dev.dll.ts",
		"lint": "cross-env NODE_ENV=development eslint . --ext .js,.jsx,.ts,.tsx",
		"package": "npm run package-mac && npm run package-lin && npm run package-win",
		"package-mac": "ts-node ./scripts/scripts/clean.js dist && npm run build && electron-builder build --mac --publish never",
		"package-lin": "ts-node ./scripts/scripts/clean.js dist && npm run build && electron-builder build --linux --publish never",
		"package-win": "ts-node ./scripts/scripts/clean.js dist && npm run build && electron-builder build --win --x64  --publish never",
		"rebuild": "electron-rebuild --parallel --types prod,dev,optional --module-dir release/app",
		"start": "ts-node ./scripts/scripts/check-port-in-use.js && npm run start:renderer",
		"start:main": "cross-env NODE_ENV=development electronmon -r ts-node/register/transpile-only .",
		"start:preload": "cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack --config ./scripts/configs/webpack.config.preload.dev.ts",
		"start:renderer": "cross-env NODE_ENV=development TS_NODE_TRANSPILE_ONLY=true webpack serve --config ./scripts/configs/webpack.config.renderer.dev.ts",
		"format": "prettier '**/*.{js,jsx,ts,tsx}' --write"
	},
	"config": {
		"forge": "./forge.config.js"
	},
	"keywords": [
		"chatgpt",
		"openai",
		"mac"
	],
	"license": "MIT",
	"dependencies": {
		"@headlessui/react": "^1.7.17",
		"@heroicons/react": "^2.0.18",
		"@radix-ui/react-dialog": "^1.0.5",
		"@radix-ui/react-icons": "^1.3.0",
		"@radix-ui/react-slot": "^1.0.2",
		"@radix-ui/react-tooltip": "^1.0.7",
		"chalk": "4.1.2",
		"class-variance-authority": "^0.7.0",
		"clsx": "^2.0.0",
		"electron-context-menu": "^3.6.1",
		"electron-debug": "^3.2.0",
		"electron-log": "^4.4.8",
		"electron-store": "^8.1.0",
		"electron-updater": "^6.1.4",
		"react": "^18.2.0",
		"react-beautiful-dnd": "^13.1.1",
		"react-dom": "^18.2.0",
		"react-router-dom": "^6.16.0",
		"react-split": "^2.0.14",
		"tailwind-merge": "^1.14.0",
		"vex-js": "^4.1.0"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/smol-ai/GodMode"
	},
	"devDependencies": {
		"@electron/notarize": "^2.1.0",
		"@electron/rebuild": "^3.3.0",
		"@pmmmwh/react-refresh-webpack-plugin": "^0.5.11",
		"@svgr/webpack": "^8.1.0",
		"@teamsupercell/typings-for-css-modules-loader": "^2.5.2",
		"@testing-library/jest-dom": "^6.1.3",
		"@testing-library/react": "^14.0.0",
		"@types/jest": "^29.5.5",
		"@types/node": "20.8.2",
		"@types/react": "^18.2.25",
		"@types/react-beautiful-dnd": "^13.1.5",
		"@types/react-dom": "^18.2.10",
		"@types/react-test-renderer": "^18.0.3",
		"@types/terser-webpack-plugin": "^5.0.4",
		"@types/webpack-bundle-analyzer": "^4.6.1",
		"@typescript-eslint/eslint-plugin": "^6.7.4",
		"@typescript-eslint/parser": "^6.7.4",
		"autoprefixer": "^10.4.16",
		"browserslist-config-erb": "^0.0.3",
		"concurrently": "^8.2.1",
		"core-js": "^3.33.0",
		"cross-env": "^7.0.3",
		"css-loader": "^6.8.1",
		"css-minimizer-webpack-plugin": "^5.0.1",
		"detect-port": "^1.5.1",
		"electron": "^26.3.0",
		"electron-builder": "^24.6.4",
		"electron-devtools-installer": "^3.2.0",
		"electronmon": "^2.0.2",
		"eslint": "^8.50.0",
		"eslint-config-airbnb-base": "^15.0.0",
		"eslint-config-erb": "^4.1.0",
		"eslint-import-resolver-typescript": "^3.6.1",
		"eslint-import-resolver-webpack": "^0.13.7",
		"eslint-plugin-compat": "^4.2.0",
		"eslint-plugin-import": "^2.28.1",
		"eslint-plugin-jest": "^27.4.2",
		"eslint-plugin-jsx-a11y": "^6.7.1",
		"eslint-plugin-promise": "^6.1.1",
		"eslint-plugin-react": "^7.33.2",
		"eslint-plugin-react-hooks": "^4.6.0",
		"file-loader": "^6.2.0",
		"html-webpack-plugin": "^5.5.3",
		"identity-obj-proxy": "^3.0.0",
		"jest": "^29.7.0",
		"jest-environment-jsdom": "^29.7.0",
		"mini-css-extract-plugin": "^2.7.6",
		"postcss": "^8.4.31",
		"postcss-loader": "^7.3.3",
		"prettier": "^3.0.3",
		"react-refresh": "^0.14.0",
		"react-test-renderer": "^18.2.0",
		"rimraf": "^5.0.5",
		"sass": "^1.68.0",
		"sass-loader": "^13.3.2",
		"style-loader": "^3.3.3",
		"tailwindcss": "^3.3.3",
		"terser-webpack-plugin": "^5.3.9",
		"ts-jest": "^29.1.1",
		"ts-loader": "^9.4.4",
		"ts-node": "^10.9.1",
		"tsconfig-paths-webpack-plugin": "^4.1.0",
		"typescript": "^5.2.2",
		"url-loader": "^4.1.1",
		"webpack": "^5.88.2",
		"webpack-bundle-analyzer": "^4.9.1",
		"webpack-cli": "^5.1.4",
		"webpack-dev-server": "^4.15.1",
		"webpack-merge": "^5.9.0"
	},
	"build": {
		"productName": "GodMode",
		"appId": "org.smol.GodMode",
		"asar": true,
		"asarUnpack": "**\\*.{node,dll}",
		"copyright": "Copyright 2023 smol.ai/godmode",
		"files": [
			"dist",
			"node_modules",
			"package.json"
		],
		"afterSign": "scripts/scripts/notarize.js",
		"mac": {
			"target": {
				"target": "default",
				"arch": [
					"arm64",
					"universal",
					"x64"
				]
			},
			"category": "public.app-category.developer-tools",
			"type": "distribution",
			"hardenedRuntime": true,
			"entitlements": "assets/entitlements.mac.plist",
			"entitlementsInherit": "assets/entitlements.mac.plist",
			"gatekeeperAssess": false
		},
		"dmg": {
			"contents": [
				{
					"x": 130,
					"y": 220
				},
				{
					"x": 410,
					"y": 220,
					"type": "link",
					"path": "/Applications"
				}
			]
		},
		"win": {
			"target": [
				{
					"target": "nsis",
					"arch": [
						"x64",
						"arm64"
					]
				}
			]
		},
		"linux": {
			"target": [
				{
					"target": "AppImage",
					"arch": [
						"x64",
						"arm64"
					]
				}
			],
			"category": "Development"
		},
		"directories": {
			"app": "release/app",
			"buildResources": "assets",
			"output": "release/build"
		},
		"extraResources": [
			"./assets/**"
		],
		"publish": {
			"provider": "github",
			"owner": "smol-ai",
			"repo": "GodMode"
		}
	},
	"devEngines": {
		"node": ">=18.x",
		"npm": ">=7.x"
	},
	"electronmon": {
		"patterns": [
			"!**/**",
			"src/main/**"
		],
		"logLevel": "verbose"
	}
}


================================================================================
FILE: CONTRIBUTING.md
================================================================================

# contributors guide

## seeking contributors!

this is a FOSS effort and will never be commercialized (no tracking, will not be a paid app (but the chat apps within might), etc). please check out the feature requests (https://github.com/smol-ai/GodMode/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc) if you'd like to help! in particular, we'd like:

- **a PR to make the 3 panels customizable to different URLs and input targets!**
- a "Windows maintainer" to handle Windows user needs and beta test every release to make sure we didn't break something for them

## Install and Run from Source

To install and run from source, follow these steps:

1. Clone the repository and navigate to the project folder:

   ```bash
   git clone https://github.com/smol-ai/GodMode.git
   cd GodMode
   ```

2. Install dependencies:

   ```bash
   npm install
   ```

3. Start the application and generate the platform-specific desktop file:

   ```bash
   npm run start
   ```

   This command will launch the application and automatically generate the appropriate desktop file or shortcut for your operating system (Linux, macOS, or Windows).

## adding/fixing providers

The best way to contribute is to add new providers or improve existing ones. Check out the [providers folder](https://github.com/smol-ai/GodMode/tree/main/src/providers) to see how they work.

The Provider base class is https://github.com/smol-ai/GodMode/blob/main/src/providers/provider.js and mostly you have to do 3 things to add a provider:

- edit the `var inputElement = document.querySelector('div.ProseMirror')` to target the right element for chat input
- edit the `var btn = document.querySelector("button[aria-label*='Send Message']");` to target the right button element to send the message
- (optional) edit the `handleCss` to clean up the UI for a small window view

See https://github.com/smol-ai/GodMode/blob/main/src/providers/claude2.js for a simple reference. Sometimes it gets more complicated, like [Bing provider](https://github.com/smol-ai/GodMode/blob/main/src/providers/bing.js), because of the DOM structure

## debugging

I have the devtools up all the time while in development. You can disable them by commenting this line.

```js
window.webContents.openDevTools();
```

## building and notarizing

Apple is a piece of sht.

copy `.env.example` to `.env` and follow https://www.electronforge.io/guides/code-signing/code-signing-macos (we tried option 1, but eventually ended up with option 2 as you see below)

then you have to generate a bunch of stuff
https://medium.com/ascentic-technology/getting-an-electron-app-ready-for-macos-distribution-2941fce27450

```bash
$ spctl -a -vvv -t install smolmenubar.app
smolmenubar.app: accepted
source=Notarized Developer ID
origin=Developer ID Application: Shawn Wang (7SVH735GV7)
```

all of this has now been packaged into a script called `npm run buildAndSign`. Note that for now, this script ONLY runs on swyx's macbook air inside the terminal (and somehow NOT in vsocde, i dont know why). If you are experienced with electron signing and notarizing, please help us make this work for all contributors!

```bash
npm run buildAndSign

> smolmenubar@0.0.16 buildAndSign
> NODE_ENV=sign npm run make


> smolmenubar@0.0.16 make
> electron-forge make --arch arm64,x64

✔ Checking your system
✔ Loading configuration
✔ Resolving make targets
  › Making for the following targets: dmg
✔ Loading configuration
✔ Resolving make targets
  › Making for the following targets: dmg
✔ Running package command
  ✔ Preparing to package application
  ✔ Running packaging hooks
    ✔ Running generateAssets hook
    ✔ Running prePackage hook
  ✔ Packaging application
    ✔ Packaging for arm64 on darwin [2m15s]
    ✔ Packaging for x64 on darwin [2m27s]
  ✔ Running postPackage hook
✔ Running preMake hook
✔ Making distributables
  ✔ Making a dmg distributable for darwin/arm64 [7s]
  ✔ Making a dmg distributable for darwin/x64 [8s]
✔ Running postMake hook
  › Artifacts available at: /Users/swyx/Documents/Work/smol-menubar/out/make
```

## publishing to app store

> NOTE: we havent actually gotten this working yet, i just straight up gave up

the below from https://developer.apple.com/help/app-store-connect/manage-builds/upload-builds is something like what we want

```bash
xcrun altool --validate-app -f smolmenubar.app -t macos -u shawnthe1@gmail.com
```

but doesnt work

```bash
xcrun altool --validate-app -f smolmenubar.app --type macos -u shawnthe1@gmail.com
shawnthe1@gmail.com's password:

2023-07-04 00:09:32.533 *** Error: Validation failed for 'smolmenubar.app'.
2023-07-04 00:09:32.534 *** Error: Unable to determine app platform for 'Undefined' software type. App Store operation failed. (1194)
 {
    NSLocalizedDescription = "Unable to determine app platform for 'Undefined' software type.";
    NSLocalizedFailureReason = "App Store operation failed.";
    NSLocalizedRecoverySuggestion = "Unable to determine app platform for 'Undefined' software type.";
}
```


================================================================================
FILE: tsconfig.json
================================================================================

{
	"compilerOptions": {
		"incremental": true,
		"target": "es2021",
		"module": "commonjs",
		"lib": ["dom", "es2021"],
		"jsx": "react-jsx",
		"strict": true,
		"sourceMap": true,
		"baseUrl": "./src",
		"moduleResolution": "node",
		"esModuleInterop": true,
		"allowSyntheticDefaultImports": true,
		"resolveJsonModule": true,
		"allowJs": true,
		"outDir": "scripts/dll"
	},
	"exclude": ["test", "release/build", "release/app/dist", "scripts/dll"]
}


================================================================================
FILE: scripts/mocks/fileMock.js
================================================================================

export default 'test-file-stub';


================================================================================
FILE: scripts/configs/webpack.config.renderer.prod.ts
================================================================================

/**
 * Build config for electron renderer process
 */

import path from 'path';
import webpack from 'webpack';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import MiniCssExtractPlugin from 'mini-css-extract-plugin';
import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';
import CssMinimizerPlugin from 'css-minimizer-webpack-plugin';
import { merge } from 'webpack-merge';
import TerserPlugin from 'terser-webpack-plugin';
import baseConfig from './webpack.config.base';
import webpackPaths from './webpack.paths';
import checkNodeEnv from '../scripts/check-node-env';
import deleteSourceMaps from '../scripts/delete-source-maps';

checkNodeEnv('production');
deleteSourceMaps();

const configuration: webpack.Configuration = {
	devtool: 'source-map',

	mode: 'production',

	target: ['web', 'electron-renderer'],

	entry: [path.join(webpackPaths.srcRendererPath, 'index.tsx')],

	output: {
		path: webpackPaths.distRendererPath,
		publicPath: './',
		filename: 'renderer.js',
		library: {
			type: 'umd',
		},
	},

	module: {
		rules: [
			{
				test: /\.s?(a|c)ss$/,
				use: [
					MiniCssExtractPlugin.loader,
					{
						loader: 'css-loader',
						options: {
							modules: true,
							sourceMap: true,
							importLoaders: 1,
						},
					},
					'sass-loader',
				],
				include: /\.module\.s?(c|a)ss$/,
			},
			{
				test: /\.s?(a|c)ss$/,
				use: [
					MiniCssExtractPlugin.loader,
					'css-loader',
					'sass-loader',
					{
						loader: 'postcss-loader',
						options: {
							postcssOptions: {
								plugins: [require('tailwindcss'), require('autoprefixer')],
							},
						},
					},
				],
				exclude: /\.module\.s?(c|a)ss$/,
			},
			// Fonts
			{
				test: /\.(woff|woff2|eot|ttf|otf)$/i,
				type: 'asset/resource',
			},
			// Images
			{
				test: /\.(png|jpg|jpeg|gif)$/i,
				type: 'asset/resource',
			},
			// SVG
			{
				test: /\.svg$/,
				use: [
					{
						loader: '@svgr/webpack',
						options: {
							prettier: false,
							svgo: false,
							svgoConfig: {
								plugins: [{ removeViewBox: false }],
							},
							titleProp: true,
							ref: true,
						},
					},
					'file-loader',
				],
			},
		],
	},

	optimization: {
		minimize: true,
		minimizer: [new TerserPlugin(), new CssMinimizerPlugin()],
	},

	plugins: [
		/**
		 * Create global constants which can be configured at compile time.
		 *
		 * Useful for allowing different behaviour between development builds and
		 * release builds
		 *
		 * NODE_ENV should be production so that modules do not perform certain
		 * development checks
		 */
		new webpack.EnvironmentPlugin({
			NODE_ENV: 'production',
			DEBUG_PROD: false,
		}),

		new MiniCssExtractPlugin({
			filename: 'style.css',
		}),

		new BundleAnalyzerPlugin({
			analyzerMode: process.env.ANALYZE === 'true' ? 'server' : 'disabled',
			analyzerPort: 8889,
		}),

		new HtmlWebpackPlugin({
			filename: 'index.html',
			template: path.join(webpackPaths.srcRendererPath, 'index.ejs'),
			minify: {
				collapseWhitespace: true,
				removeAttributeQuotes: true,
				removeComments: true,
			},
			isBrowser: false,
			isDevelopment: false,
		}),

		new webpack.DefinePlugin({
			'process.type': '"renderer"',
		}),
	],
};

export default merge(baseConfig, configuration);


================================================================================
FILE: scripts/configs/webpack.config.main.prod.ts
================================================================================

/**
 * Webpack config for production electron main process
 */

import path from 'path';
import webpack from 'webpack';
import { merge } from 'webpack-merge';
import TerserPlugin from 'terser-webpack-plugin';
import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';
import baseConfig from './webpack.config.base';
import webpackPaths from './webpack.paths';
import checkNodeEnv from '../scripts/check-node-env';
import deleteSourceMaps from '../scripts/delete-source-maps';

checkNodeEnv('production');
deleteSourceMaps();

console.log('webpackPaths.distMainPath', webpackPaths.distMainPath);

const configuration: webpack.Configuration = {
	devtool: 'source-map',

	mode: 'production',

	target: 'electron-main',

	entry: {
		main: path.join(webpackPaths.srcMainPath, 'main.ts'),
		preload: path.join(webpackPaths.srcMainPath, 'preload.ts'),
	},

	output: {
		path: webpackPaths.distMainPath,
		filename: '[name].js',
		library: {
			type: 'umd',
		},
	},

	optimization: {
		minimizer: [
			new TerserPlugin({
				parallel: true,
			}),
		],
	},

	plugins: [
		new BundleAnalyzerPlugin({
			analyzerMode: process.env.ANALYZE === 'true' ? 'server' : 'disabled',
			analyzerPort: 8888,
		}),

		/**
		 * Create global constants which can be configured at compile time.
		 *
		 * Useful for allowing different behaviour between development builds and
		 * release builds
		 *
		 * NODE_ENV should be production so that modules do not perform certain
		 * development checks
		 */
		new webpack.EnvironmentPlugin({
			NODE_ENV: 'production',
			DEBUG_PROD: false,
			START_MINIMIZED: false,
		}),

		new webpack.DefinePlugin({
			'process.type': '"browser"',
		}),
	],

	/**
	 * Disables webpack processing of __dirname and __filename.
	 * If you run the bundle in node.js it falls back to these values of node.js.
	 * https://github.com/webpack/webpack/issues/2010
	 */
	node: {
		__dirname: false,
		__filename: false,
	},
};

export default merge(baseConfig, configuration);


================================================================================
FILE: scripts/configs/webpack.config.eslint.ts
================================================================================

/* eslint import/no-unresolved: off, import/no-self-import: off */

module.exports = require('./webpack.config.renderer.dev').default;


================================================================================
FILE: scripts/configs/webpack.config.preload.dev.ts
================================================================================

import path from 'path';
import webpack from 'webpack';
import { merge } from 'webpack-merge';
import { BundleAnalyzerPlugin } from 'webpack-bundle-analyzer';
import baseConfig from './webpack.config.base';
import webpackPaths from './webpack.paths';
import checkNodeEnv from '../scripts/check-node-env';

// When an ESLint server is running, we can't set the NODE_ENV so we'll check if it's
// at the dev webpack config is not accidentally run in a production environment
if (process.env.NODE_ENV === 'production') {
	checkNodeEnv('development');
}

const configuration: webpack.Configuration = {
	devtool: 'inline-source-map',

	mode: 'development',

	target: 'electron-preload',

	entry: path.join(webpackPaths.srcMainPath, 'preload.ts'),

	output: {
		path: webpackPaths.dllPath,
		filename: 'preload.js',
		library: {
			type: 'umd',
		},
	},

	plugins: [
		new BundleAnalyzerPlugin({
			analyzerMode: process.env.ANALYZE === 'true' ? 'server' : 'disabled',
		}),

		/**
		 * Create global constants which can be configured at compile time.
		 *
		 * Useful for allowing different behaviour between development builds and
		 * release builds
		 *
		 * NODE_ENV should be production so that modules do not perform certain
		 * development checks
		 *
		 * By default, use 'development' as NODE_ENV. This can be overriden with
		 * 'staging', for example, by changing the ENV variables in the npm scripts
		 */
		new webpack.EnvironmentPlugin({
			NODE_ENV: 'development',
		}),

		new webpack.LoaderOptionsPlugin({
			debug: true,
		}),
	],

	/**
	 * Disables webpack processing of __dirname and __filename.
	 * If you run the bundle in node.js it falls back to these values of node.js.
	 * https://github.com/webpack/webpack/issues/2010
	 */
	node: {
		__dirname: false,
		__filename: false,
	},

	watch: true,
};

export default merge(baseConfig, configuration);


================================================================================
FILE: scripts/configs/webpack.config.renderer.dev.dll.ts
================================================================================

/**
 * Builds the DLL for development electron renderer process
 */

import webpack from 'webpack';
import path from 'path';
import { merge } from 'webpack-merge';
import baseConfig from './webpack.config.base';
import webpackPaths from './webpack.paths';
import { dependencies } from '../../package.json';
import checkNodeEnv from '../scripts/check-node-env';

checkNodeEnv('development');

const dist = webpackPaths.dllPath;

const configuration: webpack.Configuration = {
	context: webpackPaths.rootPath,

	devtool: 'eval',

	mode: 'development',

	target: 'electron-renderer',

	externals: ['fsevents', 'crypto-browserify'],

	/**
	 * Use `module` from `webpack.config.renderer.dev.js`
	 */
	module: require('./webpack.config.renderer.dev').default.module,

	entry: {
		renderer: Object.keys(dependencies || {}),
	},

	output: {
		path: dist,
		filename: '[name].dev.dll.js',
		library: {
			name: 'renderer',
			type: 'var',
		},
	},

	plugins: [
		new webpack.DllPlugin({
			path: path.join(dist, '[name].json'),
			name: '[name]',
		}),

		/**
		 * Create global constants which can be configured at compile time.
		 *
		 * Useful for allowing different behaviour between development builds and
		 * release builds
		 *
		 * NODE_ENV should be production so that modules do not perform certain
		 * development checks
		 */
		new webpack.EnvironmentPlugin({
			NODE_ENV: 'development',
		}),

		new webpack.LoaderOptionsPlugin({
			debug: true,
			options: {
				context: webpackPaths.srcPath,
				output: {
					path: webpackPaths.dllPath,
				},
			},
		}),
	],
};

export default merge(baseConfig, configuration);


================================================================================
FILE: scripts/configs/webpack.config.renderer.dev.ts
================================================================================

import 'webpack-dev-server';
import path from 'path';
import fs from 'fs';
import webpack from 'webpack';
import HtmlWebpackPlugin from 'html-webpack-plugin';
import chalk from 'chalk';
import { merge } from 'webpack-merge';
import { execSync, spawn } from 'child_process';
import ReactRefreshWebpackPlugin from '@pmmmwh/react-refresh-webpack-plugin';
import baseConfig from './webpack.config.base';
import webpackPaths from './webpack.paths';
import checkNodeEnv from '../scripts/check-node-env';

// When an ESLint server is running, we can't set the NODE_ENV so we'll check if it's
// at the dev webpack config is not accidentally run in a production environment
if (process.env.NODE_ENV === 'production') {
	checkNodeEnv('development');
}

const port = process.env.PORT || 1212;
const manifest = path.resolve(webpackPaths.dllPath, 'renderer.json');
const skipDLLs =
	module.parent?.filename.includes('webpack.config.renderer.dev.dll') ||
	module.parent?.filename.includes('webpack.config.eslint');

/**
 * Warn if the DLL is not built
 */
if (
	!skipDLLs &&
	!(fs.existsSync(webpackPaths.dllPath) && fs.existsSync(manifest))
) {
	console.log(
		chalk.black.bgYellow.bold(
			'The DLL files are missing. Sit back while we build them for you with "npm run build-dll"',
		),
	);
	execSync('npm run postinstall');
}

const configuration: webpack.Configuration = {
	devtool: 'inline-source-map',

	mode: 'development',

	target: ['web', 'electron-renderer'],

	entry: [
		`webpack-dev-server/client?http://localhost:${port}/dist`,
		'webpack/hot/only-dev-server',
		path.join(webpackPaths.srcRendererPath, 'index.tsx'),
	],

	output: {
		path: webpackPaths.distRendererPath,
		publicPath: '/',
		filename: 'renderer.dev.js',
		library: {
			type: 'umd',
		},
	},

	module: {
		rules: [
			{
				test: /\.s?(c|a)ss$/,
				use: [
					'style-loader',
					{
						loader: 'css-loader',
						options: {
							modules: true,
							sourceMap: true,
							importLoaders: 1,
						},
					},
					'sass-loader',
				],
				include: /\.module\.s?(c|a)ss$/,
			},
			{
				test: /\.s?css$/,
				use: [
					'style-loader',
					'css-loader',
					'sass-loader',
					{
						loader: 'postcss-loader',
						options: {
							postcssOptions: {
								plugins: [require('tailwindcss'), require('autoprefixer')],
							},
						},
					},
				],
				exclude: /\.module\.s?(c|a)ss$/,
			},
			// Fonts
			{
				test: /\.(woff|woff2|eot|ttf|otf)$/i,
				type: 'asset/resource',
			},
			// Images
			{
				test: /\.(png|jpg|jpeg|gif)$/i,
				type: 'asset/resource',
			},
			// SVG
			{
				test: /\.svg$/,
				use: [
					{
						loader: '@svgr/webpack',
						options: {
							prettier: false,
							svgo: false,
							svgoConfig: {
								plugins: [{ removeViewBox: false }],
							},
							titleProp: true,
							ref: true,
						},
					},
					'file-loader',
				],
			},
		],
	},
	plugins: [
		...(skipDLLs
			? []
			: [
					new webpack.DllReferencePlugin({
						context: webpackPaths.dllPath,
						manifest: require(manifest),
						sourceType: 'var',
					}),
			  ]),

		new webpack.NoEmitOnErrorsPlugin(),

		/**
		 * Create global constants which can be configured at compile time.
		 *
		 * Useful for allowing different behaviour between development builds and
		 * release builds
		 *
		 * NODE_ENV should be production so that modules do not perform certain
		 * development checks
		 *
		 * By default, use 'development' as NODE_ENV. This can be overriden with
		 * 'staging', for example, by changing the ENV variables in the npm scripts
		 */
		new webpack.EnvironmentPlugin({
			NODE_ENV: 'development',
		}),

		new webpack.LoaderOptionsPlugin({
			debug: true,
		}),

		new ReactRefreshWebpackPlugin(),

		new HtmlWebpackPlugin({
			filename: path.join('index.html'),
			template: path.join(webpackPaths.srcRendererPath, 'index.ejs'),
			minify: {
				collapseWhitespace: true,
				removeAttributeQuotes: true,
				removeComments: true,
			},
			isBrowser: false,
			env: process.env.NODE_ENV,
			isDevelopment: process.env.NODE_ENV !== 'production',
			nodeModules: webpackPaths.appNodeModulesPath,
		}),
	],

	node: {
		__dirname: false,
		__filename: false,
	},

	devServer: {
		port,
		compress: true,
		hot: true,
		headers: { 'Access-Control-Allow-Origin': '*' },
		static: {
			publicPath: '/',
		},
		historyApiFallback: {
			verbose: true,
		},
		setupMiddlewares(middlewares) {
			console.log('Starting preload.js builder...');
			const preloadProcess = spawn('npm', ['run', 'start:preload'], {
				shell: true,
				stdio: 'inherit',
			})
				.on('close', (code: number) => process.exit(code!))
				.on('error', (spawnError) => console.error(spawnError));

			console.log('Starting Main Process...');
			let args = ['run', 'start:main'];
			if (process.env.MAIN_ARGS) {
				args = args.concat(
					['--', ...process.env.MAIN_ARGS.matchAll(/"[^"]+"|[^\s"]+/g)].flat(),
				);
			}
			spawn('npm', args, {
				shell: true,
				stdio: 'inherit',
			})
				.on('close', (code: number) => {
					preloadProcess.kill();
					process.exit(code!);
				})
				.on('error', (spawnError) => console.error(spawnError));
			return middlewares;
		},
	},
};

export default merge(baseConfig, configuration);


================================================================================
FILE: scripts/configs/webpack.config.base.ts
================================================================================

/**
 * Base webpack config used across other specific configs
 */

import webpack from 'webpack';
import TsconfigPathsPlugins from 'tsconfig-paths-webpack-plugin';
import webpackPaths from './webpack.paths';
import { dependencies as externals } from '../../release/app/package.json';

const configuration: webpack.Configuration = {
	externals: [...Object.keys(externals || {})],

	stats: 'errors-only',

	module: {
		rules: [
			{
				test: /\.[jt]sx?$/,
				exclude: /node_modules/,
				use: {
					loader: 'ts-loader',
					options: {
						// Remove this line to enable type checking in webpack builds
						transpileOnly: true,
						compilerOptions: {
							module: 'esnext',
						},
					},
				},
			},
		],
	},

	output: {
		path: webpackPaths.srcPath,
		// https://github.com/webpack/webpack/issues/1114
		library: {
			type: 'commonjs2',
		},
	},

	/**
	 * Determine the array of extensions that should be used to resolve modules.
	 */
	resolve: {
		extensions: ['.js', '.jsx', '.json', '.ts', '.tsx'],
		modules: [webpackPaths.srcPath, 'node_modules'],
		// There is no need to add aliases here, the paths in tsconfig get mirrored
		plugins: [new TsconfigPathsPlugins()],
	},

	plugins: [
		new webpack.EnvironmentPlugin({
			NODE_ENV: 'production',
		}),
	],
};

export default configuration;


================================================================================
FILE: scripts/configs/postcss.config.js
================================================================================

const tailwindcss = require('tailwindcss');
const autoprefixer = require('autoprefixer');

module.exports = {
	plugins: [tailwindcss, autoprefixer],
};


================================================================================
FILE: scripts/configs/webpack.paths.ts
================================================================================

const path = require('path');

const rootPath = path.join(__dirname, '../..');

const dllPath = path.join(__dirname, '../dll');

const srcPath = path.join(rootPath, 'src');
const srcMainPath = path.join(srcPath, 'main');
const srcRendererPath = path.join(srcPath, 'renderer');

const releasePath = path.join(rootPath, 'release');
const appPath = path.join(releasePath, 'app');
const appPackagePath = path.join(appPath, 'package.json');
const appNodeModulesPath = path.join(appPath, 'node_modules');
const srcNodeModulesPath = path.join(srcPath, 'node_modules');

const distPath = path.join(appPath, 'dist');
const distMainPath = path.join(distPath, 'main');
const distRendererPath = path.join(distPath, 'renderer');

const buildPath = path.join(releasePath, 'build');

export default {
	rootPath,
	dllPath,
	srcPath,
	srcMainPath,
	srcRendererPath,
	releasePath,
	appPath,
	appPackagePath,
	appNodeModulesPath,
	srcNodeModulesPath,
	distPath,
	distMainPath,
	distRendererPath,
	buildPath,
};


================================================================================
FILE: scripts/scripts/delete-source-maps.js
================================================================================

import fs from 'fs';
import path from 'path';
import { rimrafSync } from 'rimraf';
import webpackPaths from '../configs/webpack.paths';

export default function deleteSourceMaps() {
	if (fs.existsSync(webpackPaths.distMainPath))
		rimrafSync(path.join(webpackPaths.distMainPath, '*.js.map'), {
			glob: true,
		});
	if (fs.existsSync(webpackPaths.distRendererPath))
		rimrafSync(path.join(webpackPaths.distRendererPath, '*.js.map'), {
			glob: true,
		});
}


================================================================================
FILE: scripts/scripts/copy-version-number.js
================================================================================

const fs = require('fs');
const path = require('path');

// Get package.json from root
const rootPackageJsonPath = path.join(__dirname, '../../package.json');
const rootPackageJson = require(rootPackageJsonPath);

// Get package.json from release/app
const appPackageJsonPath = path.join(
	__dirname,
	'../../release',
	'app',
	'package.json',
);
const appPackageJson = require(appPackageJsonPath);

// Copy version from root to app
appPackageJson.version = rootPackageJson.version;

// Write updated app package.json
fs.writeFileSync(appPackageJsonPath, JSON.stringify(appPackageJson, null, 2));

console.log(
	`Copied version ${appPackageJson.version} from root package.json to release/app/package.json`,
);


================================================================================
FILE: scripts/scripts/check-build-exists.ts
================================================================================

// Check if the renderer and main bundles are built
import path from 'path';
import chalk from 'chalk';
import fs from 'fs';
import webpackPaths from '../configs/webpack.paths';

const mainPath = path.join(webpackPaths.distMainPath, 'main.js');
const rendererPath = path.join(webpackPaths.distRendererPath, 'renderer.js');

if (!fs.existsSync(mainPath)) {
	throw new Error(
		chalk.whiteBright.bgRed.bold(
			'The main process is not built yet. Build it by running "npm run build:main"',
		),
	);
}

if (!fs.existsSync(rendererPath)) {
	throw new Error(
		chalk.whiteBright.bgRed.bold(
			'The renderer process is not built yet. Build it by running "npm run build:renderer"',
		),
	);
}


================================================================================
FILE: scripts/scripts/check-port-in-use.js
================================================================================

import chalk from 'chalk';
import detectPort from 'detect-port';

const port = process.env.PORT || '1212';

detectPort(port, (err, availablePort) => {
	if (port !== String(availablePort)) {
		throw new Error(
			chalk.whiteBright.bgRed.bold(
				`Port "${port}" on "localhost" is already in use. Please use another port. ex: PORT=4343 npm start`,
			),
		);
	} else {
		process.exit(0);
	}
});


================================================================================
FILE: scripts/scripts/clean.js
================================================================================

import { rimrafSync } from 'rimraf';
import fs from 'fs';
import webpackPaths from '../configs/webpack.paths';

const foldersToRemove = [
	webpackPaths.distPath,
	// webpackPaths.buildPath,
	webpackPaths.dllPath,
];

foldersToRemove.forEach((folder) => {
	if (fs.existsSync(folder)) rimrafSync(folder);
});


================================================================================
FILE: scripts/scripts/notarize.js
================================================================================

const { notarize } = require('@electron/notarize');
const { build } = require('../../package.json');

exports.default = async function notarizeMacos(context) {
	const { electronPlatformName, appOutDir } = context;
	if (electronPlatformName !== 'darwin') {
		return;
	}

	if (process.env.CI !== 'true') {
		console.warn('Skipping notarizing step. Packaging is not running in CI');
		return;
	}

	if (!('APPLE_ID' in process.env && 'APPLE_ID_PASS' in process.env)) {
		console.warn(
			'Skipping notarizing step. APPLE_ID and APPLE_ID_PASS env variables must be set',
		);
		return;
	}

	const appName = context.packager.appInfo.productFilename;

	const appPath = `${appOutDir}/${appName}.app`;
	await notarize({
		appPath,
		// appleId: process.env.APPLE_ID,
		// appleIdPassword: process.env.APPLE_ID_PASS,
		tool: 'notarytool',
		// https://www.electronforge.io/guides/code-signing/code-signing-macos
		appleApiKey: `build/AuthKey_QRJN4Y5JG6.p8`,
		appleApiKeyId: 'QRJN4Y5JG6',
		appleApiIssuer: '58a60bb5-5495-4a08-b180-2c106e11bc66',
	});
};


================================================================================
FILE: scripts/scripts/link-modules.ts
================================================================================

import fs from 'fs';
import webpackPaths from '../configs/webpack.paths';

const { srcNodeModulesPath } = webpackPaths;
const { appNodeModulesPath } = webpackPaths;

if (!fs.existsSync(srcNodeModulesPath) && fs.existsSync(appNodeModulesPath)) {
	fs.symlinkSync(appNodeModulesPath, srcNodeModulesPath, 'junction');
}


================================================================================
FILE: scripts/scripts/check-node-env.js
================================================================================

import chalk from 'chalk';

export default function checkNodeEnv(expectedEnv) {
	if (!expectedEnv) {
		throw new Error('"expectedEnv" not set');
	}

	if (process.env.NODE_ENV !== expectedEnv) {
		console.log(
			chalk.whiteBright.bgRed.bold(
				`"process.env.NODE_ENV" must be "${expectedEnv}" to use this webpack config`,
			),
		);
		process.exit(2);
	}
}


================================================================================
FILE: scripts/scripts/electron-rebuild.js
================================================================================

import { execSync } from 'child_process';
import fs from 'fs';
import { dependencies } from '../../release/app/package.json';
import webpackPaths from '../configs/webpack.paths';

if (
	Object.keys(dependencies || {}).length > 0 &&
	fs.existsSync(webpackPaths.appNodeModulesPath)
) {
	const electronRebuildCmd =
		'../../node_modules/.bin/electron-rebuild --force --types prod,dev,optional --module-dir .';
	const cmd =
		process.platform === 'win32'
			? electronRebuildCmd.replace(/\//g, '\\')
			: electronRebuildCmd;
	execSync(cmd, {
		cwd: webpackPaths.appPath,
		stdio: 'inherit',
	});
}


================================================================================
FILE: scripts/scripts/check-native-dep.js
================================================================================

import fs from 'fs';
import chalk from 'chalk';
import { execSync } from 'child_process';
import { dependencies } from '../../package.json';

if (dependencies) {
	const dependenciesKeys = Object.keys(dependencies);
	const nativeDeps = fs
		.readdirSync('node_modules')
		.filter((folder) => fs.existsSync(`node_modules/${folder}/binding.gyp`));
	if (nativeDeps.length === 0) {
		process.exit(0);
	}
	try {
		// Find the reason for why the dependency is installed. If it is installed
		// because of a devDependency then that is okay. Warn when it is installed
		// because of a dependency
		const { dependencies: dependenciesObject } = JSON.parse(
			execSync(`npm ls ${nativeDeps.join(' ')} --json`).toString(),
		);
		const rootDependencies = Object.keys(dependenciesObject);
		const filteredRootDependencies = rootDependencies.filter((rootDependency) =>
			dependenciesKeys.includes(rootDependency),
		);
		if (filteredRootDependencies.length > 0) {
			const plural = filteredRootDependencies.length > 1;
			console.log(`
 ${chalk.whiteBright.bgYellow.bold(
		'Webpack does not work with native dependencies.',
 )}
${chalk.bold(filteredRootDependencies.join(', '))} ${
				plural ? 'are native dependencies' : 'is a native dependency'
			} and should be installed inside of the "./release/app" folder.
 First, uninstall the packages from "./package.json":
${chalk.whiteBright.bgGreen.bold('npm uninstall your-package')}
 ${chalk.bold(
		'Then, instead of installing the package to the root "./package.json":',
 )}
${chalk.whiteBright.bgRed.bold('npm install your-package')}
 ${chalk.bold('Install the package to "./release/app/package.json"')}
${chalk.whiteBright.bgGreen.bold(
	'cd ./release/app && npm install your-package',
)}
 Read more about native dependencies at:
${chalk.bold(
	'https://electron-react-boilerplate.js.org/docs/adding-dependencies/#module-structure',
)}
 `);
			process.exit(1);
		}
	} catch (e) {
		console.log('Native dependencies could not be checked');
	}
}


================================================================================
FILE: .github/ISSUE_TEMPLATE/feature_request.md
================================================================================

---
name: Feature request
about: Suggest an idea for this project
title: '[Request]'
labels: ''
assignees: ''
---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Additional context**
Add any other context or screenshots about the feature request here.


================================================================================
FILE: .github/ISSUE_TEMPLATE/bug_report.md
================================================================================

---
name: Bug report
about: Create a report to help us improve
title: '[Bug] '
labels: bug
assignees: ''
---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
screenshots/Steps to reproduce the behavior, or a video/loom recording

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**

- OS: [e.g. iOS]
- GodMode Version [e.g. v1 beta 5]

**Additional context**
Add any other context about the problem here.


================================================================================
FILE: assets/assets.d.ts
================================================================================

type Styles = Record<string, string>;

declare module '*.svg' {
	import React = require('react');

	export const ReactComponent: React.FC<React.SVGProps<SVGSVGElement>>;

	const content: string;
	export default content;
}

declare module '*.png' {
	const content: string;
	export default content;
}

declare module '*.jpg' {
	const content: string;
	export default content;
}

declare module '*.scss' {
	const content: Styles;
	export default content;
}

declare module '*.sass' {
	const content: Styles;
	export default content;
}

declare module '*.css' {
	const content: Styles;
	export default content;
}


================================================================================
FILE: src/settings/settings.tsx
================================================================================

import React from 'react';
import ReactDOM from 'react-dom';
import SettingsComponent from './SettingsComponent';

ReactDOM.render(<SettingsComponent />, document.getElementById('root'));


================================================================================
FILE: src/settings/settings.css
================================================================================

html {
	font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
		Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
	margin: 0;
	height: 100%;
	width: 100%;
}

body {
	margin: 0;
}

.titlebar {
	height: 28px;
	-webkit-app-region: drag;
	color: #666;
	font-size: 12px;
	font-weight: bold;
	text-align: center;
	line-height: 28px;
	margin-bottom: 20px;
	border-bottom: 1px #eee solid;
	cursor: default;
	user-select: none;
}

.container {
	padding: 20px;
}

.accelerator-wrapper {
	display: flex;
	flex-direction: column;
	gap: 8px;
}

.accelerator {
	color: rgba(0, 0, 0, 0.8) !important;
	background: transparent;
	border-radius: 4px;
	padding: 0px 8px;
	transition: var(--theme-transitions-primary);
	border: 1px solid;
	border-color: rgba(0, 0, 0, 0.1);
	display: flex;
	flex-wrap: wrap;
	align-items: center;
	padding: 8px;
	gap: 4px;
	font-size: 12px;
}

.accelerator:hover {
	border-color: rgba(0, 0, 0, 0.5);
}

.accelerator-token {
	display: flex;
	align-items: center;
}

.tag {
	padding: 2px 4px;
	border-radius: 2px;
	width: fit-content;
	font-size: 12px;
	background-color: #eee;
	color: #222;
}

.tag.in-progress {
	background-color: #e0e7ff;
	color: #3730a3;
}

button {
	padding: 8px;
	border-radius: 5px;
	border: 1px solid rgba(0, 0, 0, 0.2);
}


================================================================================
FILE: src/settings/settings.html
================================================================================

<!doctype html>
<html>
	<head>
		<link rel="stylesheet" href="settings.css" />
	</head>
	<body>
		<div class="titlebar">Change Quick Open Shortcut</div>
		<div id="accelerator-container" class="container"></div>

		<script src="settings.js"></script>
	</body>
</html>


================================================================================
FILE: src/settings/archive/settings.js
================================================================================

/**
 * @type {"darwin" | "win32" | "linux"}
 */
let currentPlatform = 'darwin';
/**
 * @type {"Command" | "Super"}
 */
let metaKey = 'Command';
window.settings?.getPlatform?.().then((platform) => {
	// Get the platform from the main process
	currentPlatform = platform;
	metaKey = currentPlatform === 'darwin' ? 'Command' : 'Super';
});

/**
 * @type {string[]}
 */
let shortcut = [];
window.settings?.getQuickOpenShortcut?.().then((accelerator) => {
	// Get the accelerator from the store in the main process
	shortcut = convertAcceleratorToTokens(accelerator);
	updateDOM();
});

/**
 * @type {Set<string>}
 */
let modifierKeySet = new Set();
let interimShift = false;
let isRecording = false;
const modifierKeys = new Set(['Control', 'Shift', 'Alt', 'Meta']);

function convertAcceleratorToTokens(accelerator) {
	return accelerator.split('+').filter(Boolean);
}

function convertTokensToAccelerator(tokens) {
	return tokens.join('+');
}

/**
 * Convert a key code from a Web keyboard event to an Electron key code
 * @param {string} code
 * @returns {string}
 */
function mapWebKeyCodeToElectronKeyCode(code) {
	return code
		.toUpperCase()
		.replace('KEY', '')
		.replace('DIGIT', '')
		.replace('NUMPAD', 'NUM')
		.replace('COMMA', ',');
}

function onlyPressedModifierKeyIsShift() {
	return (
		modifierKeySet.size === 1 && modifierKeySet.has('Shift') && interimShift
	);
}

/**
 * Handle the recording of a keyboard shortcut
 * @param {KeyboardEvent} event
 */
function recordShortcut(event) {
	event.preventDefault();
	if (!isRecording) {
		return;
	}
	const { key } = event;
	if (key === 'Shift') {
		interimShift = true;
	}
	if (interimShift && modifierKeys.has(key)) {
		modifierKeySet.add('Shift');
		if (key === 'Meta') {
			modifierKeySet.add(metaKey);
		} else {
			modifierKeySet.add(key);
		}
	} else if (modifierKeys.has(key)) {
		if (key === 'Meta') {
			modifierKeySet.add(metaKey);
		} else {
			modifierKeySet.add(key);
		}
	} else if (
		key.length === 1 &&
		modifierKeySet.size > 0 &&
		!onlyPressedModifierKeyIsShift()
	) {
		const nonModifiedKey = mapWebKeyCodeToElectronKeyCode(event.code);
		if (interimShift === false) {
			modifierKeySet.delete('Shift');
		}
		const finalShortcut = Array.from(modifierKeySet).concat(nonModifiedKey);
		shortcut = finalShortcut;
		modifierKeySet = new Set();
		interimShift = false;
		isRecording = false;
		window.settings?.setQuickOpenShortcut?.(
			convertTokensToAccelerator(shortcut),
		);
	}

	updateDOM();
}

/**
 * Handle the release of a key
 * @param {KeyboardEvent} event
 */
function keyUp(event) {
	if (!isRecording) return;
	if (event.key === 'Escape') {
		isRecording = false;
	}
	const { key } = event;
	if (event.key === 'Shift') {
		interimShift = false;
	} else if (modifierKeys.has(key)) {
		modifierKeySet.delete(key);
	}
}

function toggleRecording() {
	isRecording = !isRecording;
	updateDOM();
}

function turnRecordingOff() {
	isRecording = false;
	updateDOM();
}

window.addEventListener('keydown', recordShortcut);
window.addEventListener('keyup', keyUp);

// Manually manage the DOM based on state
function updateDOM() {
	const container = document.getElementById('accelerator-container');
	container.innerHTML = '';

	if (!shortcut || shortcut.length === 0) {
		const btn = document.createElement('button');
		btn.textContent = isRecording
			? 'Recording shortcut...'
			: 'Click to record shortcut';
		btn.addEventListener('click', toggleRecording);
		container.appendChild(btn);
	} else {
		const wrapper = document.createElement('div');
		wrapper.classList.add('accelerator-wrapper');
		const shortcutDiv = document.createElement('div');
		shortcutDiv.classList.add('accelerator');
		if (isRecording) {
			const tagDiv = document.createElement('div');
			tagDiv.classList.add('tag', 'in-progress');
			tagDiv.textContent = 'Type shortcut...';
			shortcutDiv.appendChild(tagDiv);
		} else {
			shortcut.forEach((token) => {
				const tagDiv = document.createElement('div');
				tagDiv.classList.add('tag');
				tagDiv.textContent = token;
				shortcutDiv.appendChild(tagDiv);
			});
		}
		const btn = document.createElement('button');
		btn.textContent = isRecording
			? 'Cancel recording'
			: 'Click to record new shortcut';
		btn.addEventListener('click', toggleRecording);
		wrapper.appendChild(shortcutDiv);
		wrapper.appendChild(btn);
		container.appendChild(wrapper);
	}
}

// Initial render
updateDOM();


================================================================================
FILE: src/renderer/index.tsx
================================================================================

import { createRoot } from 'react-dom/client';
import App from './App';

const container = document.getElementById('root') as HTMLElement;
const root = createRoot(container);
root.render(<App />);

// calling IPC exposed from preload script
window.electron.ipcRenderer.once('ipc-example', (arg) => {
	// eslint-disable-next-line no-console
	console.log(arg);
});
window.electron.ipcRenderer.sendMessage('ipc-example', ['ping']);

window.electron.ipcRenderer.on('perplexity-llama2', (args) => {
	// comes from main.ts ipcMain.on('prompt-hidden-chat',...) sendFn(responseHTML, responseText)
	var target = document.getElementById('streamingPromptResponseContainer');
	if (target) {
		target.innerHTML = args as string;
	}
});


================================================================================
FILE: src/renderer/App.tsx
================================================================================

import { Route, MemoryRouter as Router, Routes } from 'react-router-dom';
// import icon from '../../assets/icon.svg';
// https://electron-react-boilerplate.js.org/docs/styling#tailwind-integration
import 'tailwindcss/tailwind.css';
import './App.css';
import Layout from './layout';

export default function App() {
	return (
		<Router>
			<Routes>
				<Route path="/" element={<Layout />} />
			</Routes>
		</Router>
	);
}


================================================================================
FILE: src/renderer/TitleBar.tsx
================================================================================

export function TitleBar({ isAlwaysOnTop, toggleIsAlwaysOnTop }: any) {
	return (
		<div
			id="titlebar"
			className="flex items-center justify-center px-4 text-white bg-gray-900"
		>
			<h1 className="bg-gray-900">🐣 GodMode</h1>
			<button
				className="flex items-center cursor-pointer hover:text-green-300"
				onClick={toggleIsAlwaysOnTop}
			>
				{isAlwaysOnTop ? (
					<>
						<svg
							className="inline w-4 h-4 ml-4"
							fill="none"
							stroke="currentColor"
							strokeWidth={1.5}
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
							aria-hidden="true"
						>
							<path
								strokeLinecap="round"
								strokeLinejoin="round"
								d="M17.593 3.322c1.1.128 1.907 1.077 1.907 2.185V21L12 17.25 4.5 21V5.507c0-1.108.806-2.057 1.907-2.185a48.507 48.507 0 0111.186 0z"
							/>
						</svg>
						Pinned
					</>
				) : (
					<svg
						className="inline w-4 h-4 ml-4"
						// display text on hover
						fill="none"
						stroke="currentColor"
						strokeWidth={1.5}
						viewBox="0 0 24 24"
						xmlns="http://www.w3.org/2000/svg"
						aria-hidden="true"
					>
						<path
							strokeLinecap="round"
							strokeLinejoin="round"
							d="M3 3l1.664 1.664M21 21l-1.5-1.5m-5.485-1.242L12 17.25 4.5 21V8.742m.164-4.078a2.15 2.15 0 011.743-1.342 48.507 48.507 0 0111.186 0c1.1.128 1.907 1.077 1.907 2.185V19.5M4.664 4.664L19.5 19.5"
						/>
					</svg>
				)}
			</button>
		</div>
	);
}


================================================================================
FILE: src/renderer/App.css
================================================================================

@tailwind base;
@tailwind components;
@tailwind utilities;

*,
*::before,
*::after {
	box-sizing: border-box;
}

body {
	font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica,
		Arial, sans-serif;
	padding: 0;
	margin: 0;
	overflow: hidden;
}
#root {
	height: 100vh;
}

:root {
	--superprompt-height: 4rem;
	--titlebar-height: 26px;
	--powerbar-height: 2rem;
	--allverticalheight: calc(
		var(--titlebar-height) + var(--powerbar-height) + var(--superprompt-height)
	);
	--actual-height: calc(100vh - var(--titlebar-height));
}

#titlebar {
	height: calc(var(--titlebar-height));
	-webkit-app-region: drag;
}

.vex-dialog-message ol {
	all: revert; /* locally remove tailwind styles */
}
.vex.vex-theme-os .vex-content {
	width: 90vw !important;
}
/* https://github.com/HubSpot/vex/issues/51 */
.vex-theme-os .title-bar {
	margin: -1em;
	background: #ccc;
	padding: 1em;
	margin-bottom: 1em;
	border-radius: 5px 5px 0 0;
}
.vex-theme-os .title-bar h1 {
	font-size: 1.3em;
	font-weight: normal;
	line-height: 1.2em;
	margin: 0;
}
.powerbar {
	/* height: var(--powerbar-height) */
	position: absolute;
	z-index: 10;
	left: calc(50% - 3rem);
	@apply rounded-b-lg bg-white/50;
}
.powerbar:hover {
	backdrop-filter: blur(10px);
	background: #fff;
	animation: blur 1s linear 0s infinite;
	/* box-shadow: 
    0 0 60px 30px rgba(255, 255, 255, 0.8), 
    0 0 100px 60px rgba(255, 255, 255, 0.5); */
}

#titlebar button {
	-webkit-app-region: no-drag;
}

@media (prefers-color-scheme: dark) {
	.myarrow:before {
		border-color: transparent transparent #343541 transparent !important;
	}
}

.page {
	background: #eeeeee;
	/* overflow: auto; */
	/* disabled because its quite buggy */
	/* resize: both;  */
	width: 100%;
	height: calc(
		100vh - var(--titlebar-height) - var(--superprompt-height) - 2rem
	);
	/* margin: 0 auto; */
	position: relative;
}

webview {
	/* overflow: hidden; */
	position: absolute;
	left: 0;
	width: 100%;
	height: calc(
		100vh - var(--titlebar-height) - var(--superprompt-height) - 2rem
	);
	display: inline-flex !important;
}

/* .flex {
	display: flex;
	border-radius: 8px;
	overflow: hidden;
} */
#form {
	@apply flex items-center justify-center bg-gray-600 border-0;
}

#form-wrapper {
	@apply flex w-screen;
}

#form textarea {
	@apply w-full h-full px-4 py-2 overflow-y-auto font-mono text-sm transition-colors bg-gray-600 border-0 shadow-inner outline-none focus:bg-gray-200;
}

#form svg {
	@apply stroke-white; /* Adding a margin to center the svg inside the button */
}

#webviewContainer {
	@apply flex h-max;
}

.titlebar {
	display: flex;
	justify-content: space-between;
	@apply absolute top-0 left-0 right-0 z-10 items-center h-16 text-xs text-white bg-gray-600 shadow-xl;
}

.titlebar p {
	@apply ml-4 font-mono font-semibold;
}

.titlebar button {
	@apply p-2 mr-4 font-mono text-white bg-gray-700 rounded hover:bg-gray-500;
}

.gutter {
	background-color: #a9a9a9;
	background-repeat: no-repeat;
	background-position: 50%;
}

.gutter:hover {
	background-color: #929292;
}

.gutter.gutter-horizontal {
	background-image: url('../images/vertical-grip.png');
	cursor: col-resize;
}

/* this doesnt color the bar properly */

/* Customize the bar color for Split.js */
.split .split-content::after {
	background: linear-gradient(to right, #4c6ef5, #9059ff);
}

/* Customize the bar color on hover */
.split .split-bar:hover {
	background: linear-gradient(to right, #4c6fff, #9f59ff);
}


================================================================================
FILE: src/renderer/preload.d.ts
================================================================================

import { ElectronHandler } from 'main/preload';

declare global {
	// eslint-disable-next-line no-unused-vars
	interface Window {
		electron: ElectronHandler;
	}
}

export {};


================================================================================
FILE: src/renderer/promptCritic.tsx
================================================================================

import { SparklesIcon } from '@heroicons/react/20/solid';

// @ts-ignore
import vex from 'vex-js';
// Main css
import 'vex-js/dist/css/vex.css';
// Themes (Import all themes you want to use here)
import 'vex-js/dist/css/vex-theme-default.css';
import 'vex-js/dist/css/vex-theme-os.css';
vex.registerPlugin(require('vex-dialog'));
vex.defaultOptions.className = 'vex-theme-os';

function _promptCritic(originalPrompt: string) {
	return `I need to improve the original prompt: 
  
  --- Original Prompt ---
  ${originalPrompt}
  --- End Original Prompt ---

  There are known ways to improve prompts for better LLM performance.
  Can you please briefly list ways to improve (3 <ol> <li> bullet points with <b>bolded headings</b> per bullet) and then suggest one improved prompt?
	Do not attempt to answer the prompt yourself.
  `;
	// , for example adding "Let's think step by step to get to the right answer" or adding comments before each line of code.
}

function _promptImprover(originalPrompt: string, modifyInstructions?: string) {
	return `I need to add more detail to the original prompt: 
  
  --- Original Prompt ---
  ${originalPrompt}
  --- End Original Prompt ---

  ${
		modifyInstructions
			? `My modification instructions are: ${modifyInstructions}`
			: ''
	}
  Please suggest a newer, more detailed (still <300 words) version of this prompt that improves LLM performance. 
  Do not preface with any conversation or small talk, only reply with the improved prompt.
  `;

	// For example:
	// - for general knowledge questions, appending "Let's think step by step to get to the right answer." is known to do well.
	// - for creative writing, setting temperature=200 and adding exciting adjectives, writing in the style of Hunter S Thompson and Winston Churchill and other well known authors.
	// - for code generation, first ask for the high level implementation plan in comments, then make sure each non-trivial line of code is preceded by a comment explaining what it does.

	// Do not preface with any conversation or small talk, only reply with the improved prompt.
	// `;
}

export function PromptCritic(props: {
	active: boolean;
	superprompt: string;
	setSuperprompt: (p: string) => void;
}) {
	const { active, superprompt, setSuperprompt } = props;
	async function runPromptCritic() {
		if (superprompt.length < 10) {
			alert(
				'superprompt is too short. write a longer one! e.g. "write a receipe for scrambled eggs"',
			);
			return;
		}
		if (superprompt.length > 60) {
			alert(
				'superprompt is too long. it can only currently handle low effort prompts. e.g. "write a receipe for scrambled eggs". we are working on extending it to 100k tokens!',
			);
			return;
		}
		console.log('promptCritic', superprompt);
		window.electron.browserWindow.promptHiddenChat(_promptCritic(superprompt));
		var promptChangeStr = await new Promise<string>((res) =>
			vex.dialog.prompt({
				unsafeMessage: `
					<div class="title-bar">
							<h1>PromptCritic analysis</h1>
					</div>
					<div id="streamingPromptResponseContainer">
					</div>`,
				placeholder: `Write your new prompt here`,
				callback: res,
			}),
		);
		if (!promptChangeStr) return;
		console.log('stage 2 response', promptChangeStr);

		console.log('finalPrompt', promptChangeStr);
		if (promptChangeStr != null) {
			setSuperprompt(promptChangeStr);
		}
		// window.electron.browserWindow.promptHiddenChat(_promptImprover(superprompt, promptChangeStr));
		// console.log('stage 3 response', prospectivePrompt);
		// var finalPrompt: string | null = await new Promise((res) =>
		// 	vex.dialog.prompt({
		// 		unsafeMessage: `
		// 			<div class="title-bar">
		// 					<h1>PromptCritic's Improved suggestion</h1>
		// 			</div>
		// 			<div id="streamingPromptResponseContainer">
		// 			</div>`,
		// 		// value: prospectivePrompt.responseText,
		// 		input: `<textarea name="vex" type="text" class="vex-dialog-prompt-input" placeholder="your final prompt"
		// 		value="${textareavalue}" rows="4">
		// 		${textareavalue}
		// 		</textarea>`,
		// 		placeholder: `your final prompt; copy and paste from above if it helps`,
		// 		callback: (data: any) => {
		// 			console.log({ data });
		// 			if (!data) {
		// 				console.log('Cancelled');
		// 			} else {
		// 				res(data);
		// 			}
		// 		},
		// 	}),
		// );

		// const textareavalue = prospectivePrompt.responseText.replace(
		// 	/\r|\n/,
		// 	'<br>'
		// );
		// console.log('finalPrompt', finalPrompt);
		// if (finalPrompt != null) {
		// 	setSuperprompt(finalPrompt);
		// }
	}
	return (
		<button
			className={classNames(
				active ? 'bg-gray-100 text-gray-900' : 'text-gray-700',
				'px-4 py-2 text-sm w-full flex items-center justify-start',
			)}
			onClick={runPromptCritic}
		>
			<SparklesIcon className="inline w-4 h-4 mr-2" />
			PromptCritic (alpha)
		</button>
	);
}

// https://tailwindui.com/components/application-ui/elements/dropdowns
function classNames(...classes: string[]) {
	return classes.filter(Boolean).join(' ');
}


================================================================================
FILE: src/renderer/layout.tsx
================================================================================

import { Route, MemoryRouter as Router, Routes } from 'react-router-dom';
// import icon from '../../assets/icon.svg';
// https://electron-react-boilerplate.js.org/docs/styling#tailwind-integration
import Pane from 'components/pane';
import { allProviders } from 'lib/constants';
import React from 'react';
import Split from 'react-split';
import 'tailwindcss/tailwind.css';
import { CmdOrCtrlKey, getEnabledProviders } from 'lib/utils';
import './App.css';
import { BrowserPane } from './browserPane';
import { ProviderInterface } from 'lib/types';
import { TitleBar } from './TitleBar';
import SettingsMenu from './components/settings';

// @ts-ignore
export type paneInfo = { webviewId: string; shortName: string };
const defaultPaneList = getEnabledProviders(
	allProviders as ProviderInterface[],
).map((x) => ({
	webviewId: x.webviewId,
	shortName: x.shortName,
})); // in future we will have to disconnect the provider from the webview Id
const storedPaneList: paneInfo[] = window.electron.electronStore.get(
	'paneList',
	defaultPaneList,
);

export default function Layout() {
	const [superprompt, setSuperprompt] = React.useState('');
	const [paneList, setPaneList] = React.useState(storedPaneList);
	const [isSettingsOpen, setIsSettingsOpen] = React.useState(false);

	const originalAlwaysOnTop = window.electron.browserWindow.getAlwaysOnTop();
	const [isAlwaysOnTop, setisAlwaysOnTop] = React.useState(originalAlwaysOnTop);
	const toggleIsAlwaysOnTop = () => {
		const newstate = window.electron.browserWindow.getAlwaysOnTop();
		setisAlwaysOnTop(!newstate);
		window.electron.browserWindow.setAlwaysOnTop(!newstate);
	};

	const enabledProviders = paneList.map(
		(x) => allProviders.find((y) => y.webviewId === (x.webviewId || x.id))!,
	);

	const [sizes, setSizes] = React.useState(updateSplitSizes(enabledProviders));

	React.useEffect(() => {
		window.electron.electronStore.set('paneList', paneList);
	}, [paneList]);

	const resetPaneList = () => setPaneList(defaultPaneList);

	const nonEnabledProviders: ProviderInterface[] = allProviders.filter(
		(x) => !enabledProviders.includes(x),
	);

	/*
	 * Apply provider-specific CSS and custom paste behavior
	 */
	React.useEffect(() => {
		enabledProviders.forEach((provider) => {
			provider.handleCss();
			provider.setupCustomPasteBehavior();
		});
	}, [enabledProviders]);

	React.useEffect(() => {
		enabledProviders.forEach((provider) => {
			// Call provider-specific CSS handling and custom paste setup
			try {
				// regex to sanitize superprompt from backticks since we will put it into a template string
				// solves https://github.com/smol-ai/GodMode/issues/218
				provider.handleInput(superprompt.replace(/`/g, '\\`'));
			} catch (err) {
				console.error('error settling ' + provider.paneId(), err);
			}
		});
	}, [enabledProviders, superprompt]);

	const formRef = React.useRef<HTMLDivElement>(null); // don't actually use a <form> because it will just reload on submit even if you preventdefault
	const SuperPromptEnterKey = window.electron.electronStore.get(
		'SuperPromptEnterKey',
		false,
	);

	function submitProviders() {
		enabledProviders.forEach((provider) => {
			provider.handleSubmit(superprompt);
		});
	}

	function enterKeyHandler(event: React.KeyboardEvent<HTMLTextAreaElement>) {
		const isCmdOrCtrl = event.metaKey || event.ctrlKey;
		const isEnter = event.key === 'Enter';

		if ((SuperPromptEnterKey && isEnter) || (isCmdOrCtrl && isEnter)) {
			event.preventDefault();
			submitProviders();
		}
	}

	const windowRef = React.useRef<HTMLDivElement>(null);

	function updateSplitSizes(panes: any[], focalIndex: number | null = null) {
		// const clientWidth = windowRef.current?.clientWidth!;
		// const remainingWidth = ((clientWidth - 100) / clientWidth) * 100;
		const remainingWidth = 100;
		// Handle specific pane focus
		if (focalIndex !== null || focalIndex === 'A') {
			let sizes = new Array(panes.length).fill(0);
			sizes[focalIndex] = remainingWidth;
			return sizes;
		} else {
			// Evenly distribute remaining space among all panes
			let remainingPercentage = remainingWidth / panes.length;
			let sizes = new Array(panes.length).fill(remainingPercentage);
			return sizes;
		}
	}

	const paneShortcutKeys: Record<string, number | null> = {};
	for (let i = 0; i < enabledProviders.length; i++) {
		paneShortcutKeys[`${i + 1}`] = i;
	}

	console.warn('paneShortcutKeys', paneShortcutKeys);

	const [currentlyOpenPreviewPane, setOpenPreviewPane] = React.useState(0);

	function onKeyDown(event: React.KeyboardEvent<HTMLTextAreaElement>) {
		const isCmdOrCtrl = event.metaKey || event.ctrlKey;
		const isShift = event.shiftKey;
		console.debug('keydown', event.key, isCmdOrCtrl, event);
		if (
			isCmdOrCtrl &&
			(event.key in paneShortcutKeys ||
				(event.code.match(/Digit[1-9]/) &&
					event.code[event.code.length - 1] in paneShortcutKeys))
		) {
			const digit = +event.key || +event.code[event.code.length - 1];
			if (paneShortcutKeys[digit] === null) {
				window.electron.browserWindow.reload(); // this is a hack; setSizes by itself does not seem to update the splits, seems like a bug, but we dont have a choice here
			} else {
				setOpenPreviewPane(digit);
				const previewProvider = enabledProviders.find(
					(provider) =>
						provider.webviewId === storedPaneList[digit - 1].webviewId,
				);
				// @ts-ignore
				const zoomLevel = previewProvider.getWebview()?.getZoomLevel() + 2;
				// @ts-ignore
				previewProvider.getWebview().setZoomLevel(zoomLevel);
			}
		} else if (isCmdOrCtrl && isShift && event.key.toLowerCase() === 'a') {
			window.electron.browserWindow.reload();
		} else if (
			(isCmdOrCtrl && event.key === '+') ||
			(isCmdOrCtrl && event.key === '=')
		) {
			// Increase zoom level with Cmd/Ctrl + '+' or '='
			enabledProviders.forEach((provider) => {
				// @ts-ignore
				provider
					.getWebview()
					// @ts-ignore
					.setZoomLevel(provider.getWebview().getZoomLevel() + 1);
			});
		} else if (isCmdOrCtrl && event.key === '0') {
			// reset zoomlevel
			enabledProviders.forEach((provider) => {
				// @ts-ignore
				provider
					.getWebview()
					// @ts-ignore
					.setZoomLevel(0);
			});
		} else if (isCmdOrCtrl && event.key === '-') {
			// Decrease zoom level with Cmd/Ctrl + '-'
			enabledProviders.forEach((provider) => {
				// @ts-ignore
				provider
					.getWebview()
					// @ts-ignore
					.setZoomLevel(provider.getWebview().getZoomLevel() - 1);
			});
		} else if (isCmdOrCtrl && event.key === 'p') {
			toggleIsAlwaysOnTop();
		} else if (
			event.shiftKey &&
			event.metaKey &&
			(event.key === 'L' || event.key === 'l')
		) {
			// Toggle dark mode with Cmd/Ctrl + Shift + L
			let isDarkMode = window.electron.electronStore.get('isDarkMode', false);
			isDarkMode = !isDarkMode;
			window.electron.electronStore.set('isDarkMode', isDarkMode);

			enabledProviders.forEach((provider) => {
				provider.handleDarkMode(isDarkMode);
			});
		}

		enterKeyHandler(event);
	}

	return (
		<div id="windowRef" className="flex flex-col" ref={windowRef}>
			<TitleBar {...{ isAlwaysOnTop, toggleIsAlwaysOnTop }} />
			<SettingsMenu
				open={isSettingsOpen}
				onClose={() => setIsSettingsOpen(false)}
			/>
			<Split
				sizes={sizes}
				minSize={0}
				expandToMin={false}
				gutterSize={3}
				gutterAlign="center"
				// snapOffset={30}
				dragInterval={1}
				direction="horizontal"
				// cursor="col-resize"
				className="flex"
			>
				{enabledProviders.map((provider, index) => (
					<Pane
						provider={provider as ProviderInterface}
						number={index + 1}
						currentlyOpenPreviewPane={currentlyOpenPreviewPane}
						setOpenPreviewPane={setOpenPreviewPane}
						key={index}
					/>
				))}
			</Split>
			<div
				// not a form, because the form submit causes a reload for some reason even if we preventdefault.
				ref={formRef}
				id="form"
				className=""
				// onKeyDown={handleSubmit}
			>
				<div id="form-wrapper">
					<textarea
						rows={4}
						className="resize-none"
						id="prompt"
						value={superprompt}
						onChange={(e) => setSuperprompt(e.target.value)}
						onKeyDown={onKeyDown}
						name="prompt"
						placeholder={`Enter a superprompt here.
- Quick Open: ${CmdOrCtrlKey}+Shift+G or Submit: ${CmdOrCtrlKey}+Enter
- Switch windows: ${CmdOrCtrlKey}+1/2/3/etc, or Global Resize/Pin: ${CmdOrCtrlKey} -/+/p, or Back/Fwd: ${CmdOrCtrlKey} H/L
- New chat: ${CmdOrCtrlKey}+R or Reset windows evenly: ${CmdOrCtrlKey}+Shift+A`}
					/>
					<div className="flex items-center justify-center p-4 space-x-2">
						<button
							className="flex items-center justify-center w-12 h-12 p-1 text-white transition bg-gray-600 rounded-lg shadow-inner hover:bg-gray-200"
							id="btn"
							onClick={submitProviders}
							type="submit"
							title={`${CmdOrCtrlKey}+Enter to submit`}
						>
							<svg
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
								strokeWidth="1.5"
								stroke="currentColor"
								className="w-6 h-6"
							>
								<path
									strokeLinecap="round"
									strokeLinejoin="round"
									d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5"
								/>
							</svg>
						</button>
						<BrowserPane
							{...{
								superprompt,
								setSuperprompt,
								paneList,
								setPaneList,
								resetPaneList,
								nonEnabledProviders,
								isAlwaysOnTop,
								toggleIsAlwaysOnTop,
								isSettingsOpen,
								setIsSettingsOpen,
							}}
						/>
					</div>
				</div>
			</div>
		</div>
	);
}


================================================================================
FILE: src/renderer/browserPane.tsx
================================================================================

import { Fragment, useState } from 'react';
import { Menu, Listbox, Transition } from '@headlessui/react';
import {
	Bars2Icon,
	ChevronUpDownIcon,
	CheckIcon,
	Cog6ToothIcon,
	// SparklesIcon,
} from '@heroicons/react/20/solid';
import { BookmarkIcon, BookmarkSlashIcon } from '@heroicons/react/20/solid';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { type paneInfo } from './layout';
import { ProviderInterface } from 'lib/types';

import { PromptCritic } from './promptCritic';

// https://tailwindui.com/components/application-ui/elements/dropdowns
function classNames(...classes: string[]) {
	return classes.filter(Boolean).join(' ');
}

// a little function to help us with reordering the result
const reorder = (list, startIndex, endIndex) => {
	const result = Array.from(list);
	const [removed] = result.splice(startIndex, 1);
	result.splice(endIndex, 0, removed);

	return result;
};

const grid = 2;

export function BrowserPane({
	paneList,
	setPaneList,
	resetPaneList,
	nonEnabledProviders,
	isAlwaysOnTop,
	toggleIsAlwaysOnTop,
	isSettingsOpen,
	setIsSettingsOpen,
	superprompt,
	setSuperprompt,
}: {
	paneList: paneInfo[];
	setPaneList: (paneList: paneInfo[]) => void;
	resetPaneList: () => void;
	nonEnabledProviders: ProviderInterface[];
	isAlwaysOnTop: boolean;
	toggleIsAlwaysOnTop: () => void;
	isSettingsOpen: boolean;
	setIsSettingsOpen: (isSettingsOpen: boolean) => void;
	superprompt: string;
	setSuperprompt: (p: string) => void;
}) {
	const nullProvider = {
		webviewId: 'nullProvider',
		shortName: 'Select a provider',
		fullName: 'Select a provider',
	} as ProviderInterface;

	function onDragEnd(result: {
		source: { index: number };
		destination: { index: number };
	}) {
		// dropped outside the list
		if (!result.destination) return;

		const reorderedItems = reorder(
			paneList,
			result.source.index,
			result.destination.index,
		) as paneInfo[];
		setPaneList(reorderedItems);
		window.electron.browserWindow.reload();
	}
	// Normally you would want to split things out into separate components.
	// But in this example everything is just done in one place for simplicity
	return (
		<DragDropContext onDragEnd={onDragEnd}>
			<Droppable droppableId="droppable">
				{(provided2, snapshot) => (
					<div className="flex flex-col justify-between">
						<Menu as="div" className="relative inline-block text-left">
							<div>
								<Menu.Button className="inline-flex justify-center gap-x-1.5 rounded-md px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50">
									<Bars2Icon
										className="w-4 h-4 text-gray-400"
										aria-hidden="true"
									/>
								</Menu.Button>
							</div>

							<Transition
								as={Fragment}
								enter="transition ease-out duration-100"
								enterFrom="transform opacity-0 scale-95"
								enterTo="transform opacity-100 scale-100"
								leave="transition ease-in duration-75"
								leaveFrom="transform opacity-100 scale-100"
								leaveTo="transform opacity-0 scale-95"
							>
								<Menu.Items className="absolute right-0 z-10 w-56 mt-2 origin-bottom-right bg-white divide-y divide-gray-100 rounded-md shadow-lg bottom-10 ring-1 ring-black ring-opacity-5 focus:outline-none">
									<div className="py-1">
										<Menu.Item>
											{() => (
												<span className="block px-4 py-2 text-sm text-gray-700">
													Drag to reorder, Click to hide
												</span>
											)}
										</Menu.Item>
									</div>
									<div className="py-0">
										<div
											{...provided2.droppableProps}
											ref={provided2.innerRef}
											className={`w-full ${
												snapshot.isDraggingOver ? 'bg-blue-200' : 'bg-white'
											}`}
										>
											{paneList?.map((item, index) => (
												<Draggable
													key={item.webviewId}
													draggableId={item.webviewId}
													index={index}
												>
													{(provided, snapshot) => {
														const hidePane = () => {
															setPaneList(
																paneList.filter(
																	(pane: any) =>
																		pane.webviewId !== item.webviewId,
																),
															);
															window.electron.browserWindow.reload();
														};
														return (
															<div
																ref={provided.innerRef}
																{...provided.draggableProps}
																{...provided.dragHandleProps}
																className={` user-select-none px-4 py-2 mb-2 text-sm flex group justify-between items-center ${
																	snapshot.isDragging
																		? 'bg-green-200'
																		: 'bg-gray-300'
																}
															`}
																style={provided.draggableProps.style}
															>
																{item.shortName}
																<button
																	className="hidden w-4 h-4 group-hover:flex"
																	onClick={hidePane}
																>
																	<svg
																		fill="#000000"
																		height="100%"
																		width="100%"
																		version="1.1"
																		id="Layer_1"
																		xmlns="http://www.w3.org/2000/svg"
																		xmlnsXlink="http://www.w3.org/1999/xlink"
																		viewBox="0 0 489.658 489.658"
																		xmlSpace="preserve"
																	>
																		<g
																			id="SVGRepo_bgCarrier"
																			strokeWidth="0"
																		></g>
																		<g
																			id="SVGRepo_tracerCarrier"
																			strokeLinecap="round"
																			strokeLinejoin="round"
																		></g>
																		<g id="SVGRepo_iconCarrier">
																			{' '}
																			<path d="M485.313,252.34l4.345-7.511l-4.345-7.511c-23.974-41.44-58.446-76.197-99.691-100.511 c-42.473-25.038-91.117-38.28-140.681-38.3c-0.037,0-0.074-0.001-0.112-0.001s-0.074,0.001-0.112,0.001 c-36.01,0.014-71.531,7.015-104.556,20.441L27.936,6.723L6.723,27.936L111.407,132.62c-2.476,1.358-4.935,2.751-7.371,4.187 c-41.245,24.314-75.718,59.07-99.691,100.511L0,244.829l4.345,7.511c23.974,41.44,58.446,76.197,99.691,100.511 c42.473,25.038,91.117,38.28,140.681,38.3c0.037,0,0.074,0.001,0.112,0.001s0.074-0.001,0.112-0.001 c36.01-0.014,71.531-7.015,104.556-20.441l112.226,112.226l21.213-21.213L378.251,357.038c2.476-1.358,4.935-2.751,7.371-4.187 C426.867,328.537,461.34,293.781,485.313,252.34z M454.819,244.829c-22.94,36.587-54.809,66.03-91.791,86.144 c17.673-24.184,28.124-53.964,28.124-86.144s-10.45-61.96-28.124-86.144C400.01,178.799,431.879,208.242,454.819,244.829z M244.829,361.152c-0.036,0-0.071-0.001-0.107-0.001c-64.092-0.058-116.217-52.217-116.217-116.322 c0-26.675,9.031-51.276,24.189-70.922l47.815,47.815c-3.621,6.916-5.681,14.773-5.681,23.106c0,27.57,22.43,50,50,50 c8.333,0,16.19-2.06,23.106-5.681l47.815,47.815c-19.619,15.137-44.181,24.163-70.815,24.187 C244.9,361.151,244.865,361.152,244.829,361.152z M244.829,128.506c0.036,0,0.071,0.001,0.107,0.001 c64.092,0.058,116.217,52.217,116.217,116.322c0,26.675-9.031,51.276-24.189,70.922l-47.815-47.815 c3.621-6.916,5.681-14.773,5.681-23.106c0-27.57-22.43-50-50-50c-8.333,0-16.19,2.06-23.106,5.681l-47.815-47.815 c19.619-15.137,44.181-24.163,70.815-24.187C244.758,128.507,244.793,128.506,244.829,128.506z M34.839,244.829 c22.94-36.587,54.809-66.03,91.791-86.144c-17.673,24.184-28.124,53.964-28.124,86.144s10.45,61.96,28.124,86.144 C89.648,310.859,57.779,281.416,34.839,244.829z"></path>{' '}
																		</g>
																	</svg>
																</button>
															</div>
														);
													}}
												</Draggable>
											))}
											{provided2.placeholder}
										</div>
										<Menu.Item>
											{({ active }) => (
												<div className="px-4 pb-2">
													<ListBox
														selected={nullProvider}
														selectList={[nullProvider, ...nonEnabledProviders]}
														setSelected={(value: any) => {
															if (nullProvider.webviewId !== value.webviewId) {
																setPaneList([
																	...paneList,
																	{
																		webviewId: value.webviewId,
																		shortName: value.shortName,
																	},
																]);
																window.electron.browserWindow.reload();
															}
														}}
													/>
												</div>
											)}
										</Menu.Item>
									</div>
									<div className="py-1">
										<Menu.Item>
											{({ active }) => (
												<button
													className={classNames(
														active
															? 'bg-gray-100 text-gray-900'
															: 'text-gray-700',
														'px-4 py-2 text-sm w-full flex justify-start items-center',
													)}
													onClick={() => setIsSettingsOpen(true)}
												>
													<Cog6ToothIcon className="inline w-4 h-4 mr-2" />
													Settings
												</button>
											)}
										</Menu.Item>
										<Menu.Item>
											{({ active }) => (
												<button
													className={classNames(
														active
															? 'bg-gray-100 text-gray-900'
															: 'text-gray-700',
														'px-4 py-2 text-sm w-full flex items-center justify-start',
													)}
													onClick={toggleIsAlwaysOnTop}
												>
													{isAlwaysOnTop ? (
														<BookmarkIcon className="inline w-4 h-4 mr-2 text-green-700" />
													) : (
														<BookmarkSlashIcon className="inline w-4 h-4 mr-2" />
													)}{' '}
													Toggle Always on Top
												</button>
											)}
										</Menu.Item>
										<Menu.Item>
											{({ active }) => (
												<PromptCritic
													{...{ active, superprompt, setSuperprompt }}
												/>
											)}
										</Menu.Item>
										<Menu.Item>
											{({ active }) => (
												<a
													href="https://github.com/smol-ai/GodMode/issues/new"
													target="_blank"
													// className="flex items-center justify-center px-4 py-2 text-white bg-teal-700 rounded hover:bg-teal-500"
													className={classNames(
														active
															? 'bg-gray-100 text-gray-900'
															: 'text-gray-700',
														'px-4 py-2 text-sm w-full flex justify-start',
													)}
												>
													Share Feedback
												</a>
											)}
										</Menu.Item>
										<Menu.Item>
											{({ active }) => (
												<button
													// className="flex items-center justify-center px-4 py-2 text-white bg-teal-700 rounded hover:bg-teal-500"
													className={classNames(
														active
															? 'bg-gray-100 text-red-900'
															: 'text-red-700',
														'block px-4 py-2 text-sm',
													)}
													onClick={resetPaneList}
												>
													Reset to default
												</button>
											)}
										</Menu.Item>
									</div>
								</Menu.Items>
							</Transition>
						</Menu>
					</div>
				)}
			</Droppable>
		</DragDropContext>
	);
}

// https://tailwindui.com/components/application-ui/forms/select-menus
export default function ListBox(props: {
	selected: ProviderInterface;
	setSelected: (p: ProviderInterface) => void;
	selectList: ProviderInterface[];
}) {
	const { selected, setSelected, selectList } = props;
	return (
		<Listbox value={selected} onChange={setSelected}>
			{({ open }) => (
				<>
					<Listbox.Label className="block text-sm font-medium leading-6 text-gray-900">
						Add new Provider
					</Listbox.Label>
					<div className="relative mt-2">
						<Listbox.Button className="relative w-full cursor-default rounded-md bg-white py-1.5 pl-3 pr-10 text-left text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
							<span className="block truncate">{selected.shortName}</span>
							<span className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
								<ChevronUpDownIcon
									className="w-5 h-5 text-gray-400"
									aria-hidden="true"
								/>
							</span>
						</Listbox.Button>

						<Transition
							show={open}
							as={Fragment}
							leave="transition ease-in duration-100"
							leaveFrom="opacity-100"
							leaveTo="opacity-0"
						>
							<Listbox.Options className="absolute right-0 z-10 w-full py-1 mt-1 overflow-auto text-base bg-white rounded-md shadow-lg bottom-8 max-h-60 ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
								{selectList.map((listItem) => (
									<Listbox.Option
										key={listItem.webviewId}
										className={({ active }) =>
											classNames(
												active ? 'bg-indigo-600 text-white' : 'text-gray-900',
												'relative cursor-default select-none py-2 pl-3 pr-9',
											)
										}
										value={listItem}
									>
										{({ selected, active }) => (
											<>
												<span
													className={classNames(
														selected ? 'font-semibold' : 'font-normal',
														'block truncate',
													)}
												>
													{listItem.fullName}
												</span>

												{selected ? (
													<span
														className={classNames(
															active ? 'text-white' : 'text-indigo-600',
															'absolute inset-y-0 right-0 flex items-center pr-4',
														)}
													>
														<CheckIcon className="w-5 h-5" aria-hidden="true" />
													</span>
												) : null}
											</>
										)}
									</Listbox.Option>
								))}
							</Listbox.Options>
						</Transition>
					</div>
				</>
			)}
		</Listbox>
	);
}


================================================================================
FILE: src/renderer/components/settings.tsx
================================================================================

import { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';
import { useEffect, useState } from 'react';
import { Settings } from 'lib/types';
import { Button } from './ui/button';
import { Switch } from '@headlessui/react';
import {
	convertKeyCode,
	convertModifierKey,
	modifierKeys,
	isValidShortcut,
	type ShortcutKey,
} from 'lib/utils';

export default function SettingsMenu({
	open,
	onClose,
}: {
	open: boolean;
	onClose: () => void;
}) {
	const [shortcut, setShortcut] = useState<string[]>([]);
	const [validShortcut, setValidShortcut] = useState<string[]>([]);
	const [isRecording, setIsRecording] = useState(false);
	const [metaKey, setMetaKey] = useState('');
	const [openAtLogin, setOpenAtLogin] = useState(false);
	const [superpromptFocus, setSuperpromptFocus] = useState(false);

	function classNames(...classes) {
		return classes.filter(Boolean).join(' ');
	}

	const settings = window.settings as Settings;
	let pressedKeys = new Set<string>();

	function recordShortcut(event: KeyboardEvent) {
		event.preventDefault();
		if (!isRecording) return;

		let workingShortcut = shortcut;
		const { key } = event;

		// const fetchPlatform = async () => {
		// 	const platform = await settings.getPlatform();
		// 	return platform;
		// };

		const pressedKey = modifierKeys.has(key as ShortcutKey)
			? convertModifierKey(key as ShortcutKey)
			: convertKeyCode(event.code);

		pressedKeys.add(pressedKey);
		workingShortcut = Array.from(pressedKeys);

		if (isValidShortcut(workingShortcut)) {
			pressedKeys.clear();
			setIsRecording(false);

			setValidShortcut([...workingShortcut]);
		}

		setShortcut([...workingShortcut]);
	}

	function keyUp(event: KeyboardEvent) {
		event.preventDefault();
		// if (!isRecording) return;
		const { key } = event;
		if (modifierKeys.has(key as ShortcutKey)) {
			pressedKeys.delete(convertModifierKey(key as ShortcutKey));
		} else {
			pressedKeys.delete(convertKeyCode(event.code));
		}
		if (key === 'Escape') setIsRecording(false);
	}

	// Set the meta key on mount based on platform (cmd on mac, ctrl on windows)
	useEffect(() => {
		const fetchPlatform = async () => {
			const platform = await settings.getPlatform();
			setMetaKey(platform === 'darwin' ? 'CmdOrCtrl' : 'Control');
		};
		if (isValidShortcut(shortcut)) fetchPlatform();
	}, []);

	// Set the initial super prompt focus and shortcut states from the main process on mount
	useEffect(() => {
		const displayShortcut = async () => {
			const initialShortcut = await settings.getGlobalShortcut();
			console.debug('initialShortcut', initialShortcut);
			setShortcut(initialShortcut?.split('+'));
		};
		const setInitialSuperpromptFocus = async () => {
			const initialState = await settings.getFocusSuperprompt();
			setSuperpromptFocus(initialState);
		};
		displayShortcut();
		setInitialSuperpromptFocus();
	}, []);

	// Whenever shortcut is updated, update it in the electron store in the main process via IPC
	useEffect(() => {
		if (!isValidShortcut(validShortcut)) return;
		const updateShortcut = async (shortcut: string[]) => {
			const newShortcut = shortcut.join('+');
			const sc = await settings.setGlobalShortcut(newShortcut);
			setValidShortcut([]);
		};
		updateShortcut(validShortcut);
	}, [validShortcut]);
	// Toggle superprompt focus setting in electron store
	useEffect(() => {
		const updateSuperpromptFocus = async () => {
			await settings.setFocusSuperprompt(superpromptFocus);
		};
		updateSuperpromptFocus();
	}, [superpromptFocus]);
	// Turn on key listeners when recording shortcuts
	useEffect(() => {
		if (isRecording && validShortcut.length === 0) {
			console.log('inside recording');
			window.addEventListener('keydown', recordShortcut);
			window.addEventListener('keyup', keyUp);
		} else {
			console.log('inside not recording');
			window.removeEventListener('keydown', recordShortcut);
			window.removeEventListener('keyup', keyUp);
		}
		return () => {
			window.removeEventListener('keydown', recordShortcut);
			window.removeEventListener('keyup', keyUp);
		};
	}, [isRecording, validShortcut]);

	// Turn off recording when the dialog is closed
	useEffect(() => {
		if (!open) setIsRecording(false);
	}, [open]);

	useEffect(() => {
		const fetchOpenAtLogin = async () => {
			const isOpen = await settings.getOpenAtLogin();
			setOpenAtLogin(isOpen);
		};
		fetchOpenAtLogin();
	}, []);

	useEffect(() => {
		openAtLogin
			? window.electron.browserWindow.enableOpenAtLogin()
			: window.electron.browserWindow.disableOpenAtLogin();
	}, [openAtLogin]);

	return (
		<Dialog open={open} onOpenChange={onClose}>
			<DialogContent className="bg-white">
				<DialogHeader>
					<DialogTitle>Settings</DialogTitle>
				</DialogHeader>
				<Switch.Group as="div" className="flex items-center justify-between">
					<span className="flex flex-col flex-grow">
						<Switch.Label
							as="span"
							className="text-sm font-medium leading-6 text-gray-900"
							passive
						>
							Automatically Open GodMode at Login
						</Switch.Label>
					</span>
					<Switch
						checked={openAtLogin}
						onChange={setOpenAtLogin}
						className={classNames(
							openAtLogin ? 'bg-indigo-600' : 'bg-gray-200',
							'relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none',
						)}
					>
						<span
							aria-hidden="true"
							className={classNames(
								openAtLogin ? 'translate-x-5' : 'translate-x-0',
								'pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out',
							)}
						/>
					</Switch>
				</Switch.Group>
				<Switch.Group as="div" className="flex items-center justify-between">
					<span className="flex flex-col flex-grow">
						<Switch.Label
							as="span"
							className="text-sm font-medium leading-6 text-gray-900"
							passive
						>
							Focus superprompt input on quick open shortcut
						</Switch.Label>
					</span>
					<Switch
						checked={superpromptFocus}
						onChange={setSuperpromptFocus}
						className={classNames(
							superpromptFocus ? 'bg-indigo-600' : 'bg-gray-200',
							'relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent transition-colors duration-200 ease-in-out focus:outline-none',
						)}
					>
						<span
							aria-hidden="true"
							className={classNames(
								superpromptFocus ? 'translate-x-5' : 'translate-x-0',
								'pointer-events-none inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out',
							)}
						/>
					</Switch>
				</Switch.Group>
				<span className="flex flex-col flex-grow">
					<div
						as="span"
						className="text-sm font-medium leading-6 text-gray-900"
						passive
					>
						Change Shortcut
					</div>
				</span>

				<div
					id="accelerator-container"
					className="flex flex-row justify-center"
				>
					{shortcut?.map((key, index) => (
						<div key={index} className="flex items-center">
							<div className="px-2 py-1 text-xs bg-gray-200 rounded-md dark:bg-gray:700">
								{key}
							</div>
							<div className="mx-2 text-sm">
								{index < shortcut.length - 1 && '+'}
							</div>
						</div>
					))}
				</div>
				{isRecording ? (
					<Button
						onClick={() => setIsRecording(!isRecording)}
						variant="outline"
						className="text-red-500"
					>
						Recording...
					</Button>
				) : (
					<Button
						onClick={() => setIsRecording(!isRecording)}
						variant="outline"
						className=""
					>
						Record shortcut
					</Button>
				)}
			</DialogContent>
		</Dialog>
	);
}


================================================================================
FILE: src/renderer/components/ui/tooltip.tsx
================================================================================

'use client';

import * as React from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';

import { cn } from '/lib/utils';

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
	React.ElementRef<typeof TooltipPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
	<TooltipPrimitive.Content
		ref={ref}
		sideOffset={sideOffset}
		className={cn(
			'z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
			className,
		)}
		{...props}
	/>
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };


================================================================================
FILE: src/renderer/components/ui/dialog.tsx
================================================================================

'use client';

import * as React from 'react';
import * as DialogPrimitive from '@radix-ui/react-dialog';
import { Cross2Icon } from '@radix-ui/react-icons';

import { cn } from 'lib/utils';

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = ({
	className,
	...props
}: DialogPrimitive.DialogPortalProps) => (
	<DialogPrimitive.Portal className={cn(className)} {...props} />
);
DialogPortal.displayName = DialogPrimitive.Portal.displayName;

const DialogOverlay = React.forwardRef<
	React.ElementRef<typeof DialogPrimitive.Overlay>,
	React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
	<DialogPrimitive.Overlay
		ref={ref}
		className={cn(
			'fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
			className,
		)}
		{...props}
	/>
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
	React.ElementRef<typeof DialogPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
	<DialogPortal>
		<DialogOverlay />
		<DialogPrimitive.Content
			ref={ref}
			className={cn(
				'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full',
				className,
			)}
			{...props}
		>
			{children}
			<DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
				<Cross2Icon className="w-4 h-4" />
				<span className="sr-only">Close</span>
			</DialogPrimitive.Close>
		</DialogPrimitive.Content>
	</DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogXContent = React.forwardRef<
	React.ElementRef<typeof DialogPrimitive.Content>,
	React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
	<DialogPortal>
		<DialogOverlay />
		<DialogPrimitive.Content
			ref={ref}
			className={cn(
				'fixed left-[5%] top-[5%] z-50 grid w-10/12 gap-4 border bg-background p-2 shadow-lg duration-200 sm:rounded-lg h-[90vh]',
				className,
			)}
			{...props}
		>
			{children}
			<DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
				<Cross2Icon className="w-4 h-4" />
				<span className="sr-only">Close</span>
			</DialogPrimitive.Close>
		</DialogPrimitive.Content>
	</DialogPortal>
));
DialogXContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn(
			'flex flex-col space-y-1.5 text-center sm:text-left',
			className,
		)}
		{...props}
	/>
);
DialogHeader.displayName = 'DialogHeader';

const DialogFooter = ({
	className,
	...props
}: React.HTMLAttributes<HTMLDivElement>) => (
	<div
		className={cn(
			'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
			className,
		)}
		{...props}
	/>
);
DialogFooter.displayName = 'DialogFooter';

const DialogTitle = React.forwardRef<
	React.ElementRef<typeof DialogPrimitive.Title>,
	React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
	<DialogPrimitive.Title
		ref={ref}
		className={cn(
			'text-lg font-semibold leading-none tracking-tight',
			className,
		)}
		{...props}
	/>
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
	React.ElementRef<typeof DialogPrimitive.Description>,
	React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
	<DialogPrimitive.Description
		ref={ref}
		className={cn('text-sm text-muted-foreground', className)}
		{...props}
	/>
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
	Dialog,
	DialogTrigger,
	DialogContent,
	DialogXContent,
	DialogHeader,
	DialogFooter,
	DialogTitle,
	DialogDescription,
};


================================================================================
FILE: src/renderer/components/ui/button.tsx
================================================================================

import * as React from 'react';
import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';

import { cn } from 'lib/utils';

const buttonVariants = cva(
	'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50',
	{
		variants: {
			variant: {
				default:
					'bg-primary text-primary-foreground shadow hover:bg-primary/90',
				destructive:
					'bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90',
				outline:
					'border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground',
				secondary:
					'bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80',
				ghost: 'hover:bg-accent hover:text-accent-foreground',
				link: 'text-primary underline-offset-4 hover:underline',
			},
			size: {
				default: 'h-9 px-4 py-2',
				sm: 'h-8 rounded-md px-3 text-xs',
				lg: 'h-10 rounded-md px-8',
				icon: 'h-9 w-9',
			},
		},
		defaultVariants: {
			variant: 'default',
			size: 'default',
		},
	},
);

export interface ButtonProps
	extends React.ButtonHTMLAttributes<HTMLButtonElement>,
		VariantProps<typeof buttonVariants> {
	asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
	({ className, variant, size, asChild = false, ...props }, ref) => {
		const Comp = asChild ? Slot : 'button';
		return (
			<Comp
				className={cn(buttonVariants({ variant, size, className }))}
				ref={ref}
				{...props}
			/>
		);
	},
);
Button.displayName = 'Button';

export { Button, buttonVariants };


================================================================================
FILE: src/renderer/components/ui/input.tsx
================================================================================

import * as React from 'react';

import { cn } from 'lib/utils';

export interface InputProps
	extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
	({ className, type, ...props }, ref) => {
		return (
			<input
				type={type}
				className={cn(
					'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
					className,
				)}
				ref={ref}
				{...props}
			/>
		);
	},
);
Input.displayName = 'Input';

export { Input };


================================================================================
FILE: src/providers/smol.js
================================================================================

const Provider = require('./provider');

class SmolTalk extends Provider {
	static webviewId = 'webviewSMOL';
	static fullName = 'Smol Talk (WIP)';
	static shortName = 'Smol';

	static url = 'https://smoltalk.vercel.app/';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`{
		var inputElement = document.querySelector('#smol-inputbox')
		if (inputElement) {
			const inputEvent = new Event('input', { bubbles: true });
			inputElement.dispatchEvent(inputEvent);
			var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
			var event = new Event('input', { bubbles: true});

			nativeTextAreaValueSetter.call(inputElement, \`${input}\`);
			inputElement.dispatchEvent(event);
		}
	}`);
	}

	static clearCookies() {
		this.getWebview().executeJavaScript(`{
      const cookies = document.cookie.split(";");

      for (let i = 0; i < cookies.length; i++) {
          const cookie = cookies[i];
          const eqPos = cookie.indexOf("=");
          const name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
          document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
      }
		}`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{

    var btn = document.querySelector('#smol-submitbtn');
		if (btn) {
			btn.focus();
			btn.setAttribute("aria-disabled", "false"); // doesnt work alone
			btn.disabled = false;
			btn.click()
		}

	}`);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// // hide message below text input, sidebar, suggestions on new chat
			// setTimeout(() => {
			// 	this.getWebview().insertCSS(`
			//   header, .container {
			//     background-color: white;
			//     /* single line dark mode ftw */
			//     filter: invert(100%) hue-rotate(180deg);
			//   }
			//   /* hide the claude avatar in response */
			//   .p-1.w-9.h-9.shrink-0 {
			//     display: none;
			//   }
			//   /* reduce claude prompt margins */
			//   .mx-4.md\:mx-12.mb-2.md\:mb-4.mt-2.w-auto {
			//     margin: 0 !important;
			//   }
			//   `);
			// }, 1000);
		});
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = SmolTalk;


================================================================================
FILE: src/providers/poe.js
================================================================================

const Provider = require('./provider');

class Poe extends Provider {
	static webviewId = 'webviewPoe';
	static fullName = 'Quora Poe';
	static shortName = 'Poe';

	static url = 'https://poe.com/';

	static handleInput(input) {
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea');
        if (inputElement) {
					var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
					nativeTextAreaValueSetter.call(inputElement, \`${input}\`);

					var event = new Event('input', { bubbles: true});
					inputElement.dispatchEvent(event);
        }
    }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
        var button = document.querySelectorAll('button[class*="ChatMessageSendButton_sendButton"]')[0]
				if (button) {
					button.click();
				}
    }`);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			setTimeout(() => {
				this.getWebview().executeJavaScript(`
          `);
			}, 100);
			// Hide the "Try asking" segment
			setTimeout(() => {
				this.getWebview().insertCSS(`
        .mt-lg {
          display: none;
        }
		    `);
			}, 100);
		});
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, true);
	}
}

module.exports = Poe;


================================================================================
FILE: src/providers/claude.js
================================================================================

const Provider = require('./provider');

class Claude extends Provider {
	static webviewId = 'webviewCLAUDE';
	static fullName = 'Anthropic Claude';
	static shortName = 'Claude1';

	static url = 'https://console.anthropic.com/chat/new';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`{
    var inputElement = document.querySelector('div.ProseMirror')
		if (inputElement) {
			inputElement.innerHTML = \`${input}\`
		}
		}`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
    var btn = document.querySelector('div.group.grid.p-3 button:has(svg)'); // YES we are using the has selector!!!!
		if (btn) {
			btn.focus();
			btn.disabled = false;
			btn.click()
		}
	}`);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			setTimeout(() => {
				this.getWebview().insertCSS(`
        header, .container {
          background-color: white;
          /* single line dark mode ftw */
          filter: invert(100%) hue-rotate(180deg);
        }
        /* hide the claude avatar in response */
        .p-1.w-9.h-9.shrink-0 {
          display: none;
        }
        /* reduce claude prompt margins */
        .mx-4.md\:mx-12.mb-2.md\:mb-4.mt-2.w-auto {
          margin: 0 !important;
        }
        `);
			}, 100);
		});
	}

	static toggleDarkMode() {
		if (isDarkMode) {
			this.getWebview().insertCSS(`
				body {
					background-color: #1d1d1d !important;
					filter: invert(100%) hue-rotate(180deg);
				}
			`);
		} else {
			this.getWebview().insertCSS(`
				body {
					background-color: #ffffff !important;
					filter: none;
				}
			`);
		}
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = Claude;


================================================================================
FILE: src/providers/openrouter.js
================================================================================

const Provider = require('./provider');

class OpenRouter extends Provider {
	static webviewId = 'webviewOpenRouter';
	static fullName = 'OpenRouter Playground';
	static shortName = 'OpenRouter';

	static url = 'https://openrouter.ai/playground';

	static handleInput(input) {
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea[placeholder*="Chat or prompt"]'); // can be "Ask anything" or "Ask follow-up"
        if (inputElement) {
					var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
					nativeTextAreaValueSetter.call(inputElement, \`${input}\`);
					var event = new Event('input', { bubbles: true});
					inputElement.dispatchEvent(event);
        }
    }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
    var buttons = Array.from(document.querySelectorAll('button'));
		if (buttons[0]) {
			var buttonsWithSVGOnly = buttons.filter(button => {
				var svg = button.querySelector('svg');
				return !!svg;
			});

			if (buttonsWithSrOnly.length == 1){
				var button = buttonsWithSrOnly[0];
				button.click();
			}
		}
  }`);
	}
	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// Hide the "Try asking" segment
			setTimeout(() => {
				this.getWebview().insertCSS(`
        .mt-lg {
          display: none;
        }
		    `);
			}, 100);
		});
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = OpenRouter;


================================================================================
FILE: src/providers/you.js
================================================================================

const Provider = require('./provider');

class YouChat extends Provider {
	static webviewId = 'webviewYoudotcom';
	static fullName = 'You.com Chat';
	static shortName = 'You.com';

	static url = 'https://you.com/chat/';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea[placeholder*="Ask me anything..."]');
        if (inputElement) {
					var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
					nativeTextAreaValueSetter.call(inputElement, \`${input}\`);

					var event = new Event('input', { bubbles: true});
					inputElement.dispatchEvent(event);
        }
    }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
    var buttons = Array.from(document.querySelectorAll('button[type="submit"]'));
		if (buttons[0]) {
			buttons[0].click();
		}
  }`);
	}
	static handleCss() {
		// this.getWebview().addEventListener('dom-ready', () => {
		// 	// Hide the "Try asking" segment
		// 	setTimeout(() => {
		// 		this.getWebview().insertCSS(`
		//     .mt-lg {
		//       display: none;
		//     }
		//     `);
		// 	}, 100);
		// });
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = YouChat;


================================================================================
FILE: src/providers/claude2.js
================================================================================

const Provider = require('./provider');

class Claude2 extends Provider {
	static webviewId = 'webviewCLAUDE2';
	static fullName = 'Anthropic Claude 2';
	static shortName = 'Claude2';

	static url = 'https://claude.ai/chats/';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`{
    var inputElement = document.querySelector('div.ProseMirror')
		if (inputElement) {
			inputElement.innerHTML = \`${input}\`
		}
	}`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
		var btn = document.querySelector("button[aria-label*='Send Message']"); // subsequent screens use this
    if (!btn) var btn = document.querySelector('button:has(div svg)'); // new chats use this
    if (!btn) var btn = document.querySelector('button:has(svg)'); // last ditch attempt
		if (btn) {
			btn.focus();
			btn.disabled = false;
			btn.click();
		}
  }`);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			setTimeout(() => {
				this.getWebview().insertCSS(`
        /* hide the claude avatar in response */
        .p-1.w-9.h-9.shrink-0 {
          display: none;
        }
        /* reduce claude prompt margins */
        .mx-4.md\:mx-12.mb-2.md\:mb-4.mt-2.w-auto {
          margin: 0 !important;
        }

        `);
			}, 1000);
			setTimeout(() => {
				this.getWebview().executeJavaScript(`{
				// hide welcome back title
				document.querySelector('h2').style.display = 'none';
				}`);
			}, 1000);
		});
	}

	static handleDarkMode(isDarkMode) {
		if (isDarkMode) {
			this.getWebview().insertCSS(`
				body {
					background-color: #1d1d1d !important;
					filter: invert(100%) hue-rotate(180deg);
				}
			`);
		} else {
			this.getWebview().insertCSS(`
				body {
					background-color: #ffffff !important;
					filter: none;
				}
			`);
		}
	}

	static getUserAgent() {
		'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36';
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, true);
	}
}

module.exports = Claude2;


================================================================================
FILE: src/providers/phind.js
================================================================================

const Provider = require('./provider');

class Phind extends Provider {
	static webviewId = 'webviewPhind';
	static fullName = 'Phind';
	static shortName = 'Phind';

	static url = 'https://www.phind.com/';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea[placeholder*="Describe your task in detail. What are you stuck on"]');
        if (!inputElement) {
            inputElement = document.querySelector('textarea[placeholder*="Send message"]');
        }
        if (inputElement) {
          var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
          var event = new Event('input', { bubbles: true});

          nativeTextAreaValueSetter.call(inputElement, \`${input}\`);
          inputElement.dispatchEvent(event);
        }

      }`);
	}

	static handleSubmit(superprompt) {
		// url encode superprompt and navigate webview
		const encodedSuperprompt = encodeURIComponent(superprompt);
		this.getWebview().loadURL(
			`https://www.phind.com/search?q=${encodedSuperprompt}&source=searchbox`,
		);

		// doesnt work
		// this.getWebview().executeJavaScript(`{
		//   var button = document.querySelector('button[type="submit"]');
		//   button.click();
		//   }`);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// briefly commented out in order to get Phind to work - swyx
			// setTimeout(() => {
			// 	this.getWebview().executeJavaScript(`{
			//   // Hide Phind Logo
			//   const images = document.querySelectorAll('img[src*="phind"]');
			//   if (images) images[images.length - 1].setAttribute('style', 'display: none;');
			//   // Hide Tagline
			//   const tagline = document.querySelector('h1');
			//   if (tagline) tagline.setAttribute('style', 'display: none;');
			//   // Hide Explore Options
			//   const exploreOptions = document.querySelector('div.container:has(h4)');
			//   if (exploreOptions) exploreOptions.setAttribute('style', 'display: none;');
			//   }`);
			// }, 100);
		});
	}

	// Some providers will have their own dark mode implementation
	static handleDarkMode(isDarkMode) {
		// briefly commented out in order to get Phind to work - swyx
		// Implement dark or light mode using prodiver-specific code
		if (isDarkMode) {
			this.getWebview().executeJavaScript(`{
        document.documentElement.setAttribute('data-theme', 'dark');
      }`);
		} else {
			this.getWebview().executeJavaScript(`{
        document.documentElement.setAttribute('data-theme', 'light');
      }`);
		}
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = Phind;


================================================================================
FILE: src/providers/perplexity.js
================================================================================

const Provider = require('./provider');

class Perplexity extends Provider {
	static webviewId = 'webviewPerplexity';
	static fullName = 'Perplexity';
	static shortName = 'Perplexity';

	static url = 'https://www.perplexity.ai/';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`
        var inputElement = document.querySelector('textarea[placeholder*="Ask"]'); // can be "Ask anything" or "Ask follow-up"
        if (inputElement) {
          var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
          nativeTextAreaValueSetter.call(inputElement, \`${input}\`);

          var event = new Event('input', { bubbles: true});
          inputElement.dispatchEvent(event);
        }
      `);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
        var buttons = Array.from(document.querySelectorAll('button.bg-super'));
				if (buttons[0]) {
					var buttonsWithSvgPath = buttons.filter(button => button.querySelector('svg path'));
					var button = buttonsWithSvgPath[buttonsWithSvgPath.length - 1];
					button.click();
				}
      }`);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			setTimeout(() => {
				this.getWebview().executeJavaScript(`


          `);
			}, 100);
			// Hide the "Try asking" segment
			setTimeout(() => {
				this.getWebview().insertCSS(`
        body {
					zoom: 80%;
					font-size: small;
        }

        .mt-lg {
          display: none;
        }
		    `);
			}, 100);
		});
		// this.getWebview().setZoomLevel(this.getWebview().getZoomLevel() - 2);
	}

	static getUserAgent() {
		'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36';
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, true);
	}
}

module.exports = Perplexity;


================================================================================
FILE: src/providers/bing.js
================================================================================

const Provider = require('./provider');

class Bing extends Provider {
	static webviewId = 'webviewBING';
	static fullName = 'Microsoft Bing';
	static shortName = 'Bing';

	static url = 'https://bing.com/chat';

	static handleInput(input) {
		this.getWebview().executeJavaScript(`{
			// Simulate user input
			function simulateUserInput(element, text) {
				const inputEvent = new Event('input', { bubbles: true });
				element.focus();
				element.value = text;
				element.dispatchEvent(inputEvent);
			}

			// SERP Shadow DOM
			var serpDOM = document.querySelector('.cib-serp-main');

			// Action Bar Shadow DOM
			var inputDOM = serpDOM.shadowRoot.querySelector('#cib-action-bar-main');

			// Text Input Shadow DOM
			var textInputDOM = inputDOM.shadowRoot.querySelector('cib-text-input');

			// This inner cib-text-input Shadow DOM is not always present
			var inputElement = textInputDOM ? textInputDOM.shadowRoot.querySelector('#searchbox') : inputDOM.shadowRoot.querySelector('#searchbox');

			if (inputElement) {
				simulateUserInput(inputElement, \`${input}\`);
			}
    }
		`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
			try {
				// Access SERP Shadow DOM
				var serpDOM = document.querySelector('.cib-serp-main');

				// Conversation Shadow DOM - Contains
				var conversationDOM = serpDOM.shadowRoot.querySelector('#cib-conversation-main');

				// Action Bar Shadow DOM
				var actionDOM = serpDOM.shadowRoot.querySelector('#cib-action-bar-main');

				// Icon Shadow DOM
				var iconDOM = actionDOM.shadowRoot.querySelector('div.submit > cib-icon-button');

				// Submit Button
				var submitButton = iconDOM.shadowRoot.querySelector('button');
				if (submitButton) {
					submitButton.click();

					submitButton.focus();
					setTimeout(() => {
						submitButton.click();
					}, 100)
				}
			} catch (e) {
				console.error('Bing submit error', e);
			}

  }
		`);
	}

	/** Bing requires MS Edge user agent. */
	static getUserAgent() {
		return 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36 Edg/91.0.864.37';
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			setTimeout(() => {
				// .b_sydConvMode::after {
				this.getWebview().insertCSS(`
				html, body {
					overflow: hidden;
					scrollbar-width: none;
					zoom: 80%;
					font-size: small;
				}
				header {
					display: none !important;
				}
				#b_sydWelcomeTemplate {
					display: none !important;
				}
				.preview-container {
					display: none !important;
				}
        `);
			}, 1000);
			// this.getWebview().setZoomLevel(this.getWebview().getZoomLevel() - 2);
			// setTimeout(() => {
			// 	this.getWebview().executeJavaScript(`{

			// 		// Access SERP Shadow DOM
			// 		var serpDOM = document.querySelector('.cib-serp-main').shadowRoot;

			// 		// Conversation Shadow DOM
			// 		var conversationDOM = serpDOM.querySelector('#cib-conversation-main').shadowRoot;

			// 		// Action Bar Shadow DOM
			// 		var actionBarDOM = serpDOM.querySelector('#cib-action-bar-main').shadowRoot;

			// 		// Text Input Shadow DOM
			// 		var textInputDOM = actionBarDOM.querySelector('cib-text-input').shadowRoot;

			// 		// Welcome Container Shadow DOM
			// 		var welcomeDOM = conversationDOM.querySelector('cib-welcome-container').shadowRoot;

			// 		// Hide all welcome container items except tone selector
			// 		// welcomeDOM.querySelector('div.preview-container').setAttribute('style', 'display: none !important;');

			// 		// Hide all welcome container items except tone selector
			// 		welcomeDOM.querySelector('div.container-logo').setAttribute('style', 'display: none !important');
			// 		welcomeDOM.querySelector('div.container-title').setAttribute('style', 'color: white !important');
			// 		welcomeDOM.querySelector('div.container-subTitle').setAttribute('style', 'display: none !important');
			// 		welcomeDOM.querySelector('div.container-item').setAttribute('style', 'display: none !important');
			// 		welcomeDOM.querySelector('div.learn-tag-item').setAttribute('style', 'display: none !important');
			// 		welcomeDOM.querySelector('div.privacy-statement').setAttribute('style', 'display: none !important');

			// 		// Remove feedback widget
			// 		serpDOM.querySelector('cib-serp-feedback').setAttribute('style', 'display: none !important');

			// 		// Remove background gradients
			// 		serpDOM.querySelector('cib-background').remove();
			// 		conversationDOM.querySelector('.fade.top').remove();
			// 		conversationDOM.querySelector('.fade.bottom').remove();

			//   }
			// 	`);
			// }, 1000);
		});
	}

	// Some providers will have their own dark mode implementation
	static handleDarkMode(isDarkMode) {
		// Implement dark or light mode using prodiver-specific code
		if (isDarkMode) {
			this.getWebview().executeJavaScript(`{
				document.getElementById("rdiodark").click();
      }
			`);
		} else {
			this.getWebview().executeJavaScript(`{
				document?.getElementById("rdiolight").click();
      }
			`);
		}
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, true);
	}
}

module.exports = Bing;


================================================================================
FILE: src/providers/lepton-llama.js
================================================================================

const Provider = require('./provider');

class LeptonLlama extends Provider {
	static webviewId = 'webiewLeptonLlama';
	static fullName = 'Llama 2 (via Lepton)';
	static shortName = 'Llama2-Lepton';

	static url = 'https://llama2.lepton.run/';

	static handleInput(input) {
		try {
			this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea[placeholder*="Send a message"]');
        if (inputElement) {
					var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
					nativeTextAreaValueSetter.call(inputElement, \`${input}\`);
					var event = new Event('input', { bubbles: true});
					inputElement.dispatchEvent(event);
        }
		}`);
		} catch (e) {
			console.debug('Error in LeptonLlama.handleInput():', e);
		}
	}

	static codeForInputElement = `var inputElement = document.querySelector('textarea[placeholder*="Ask"]');`;
	static codeForSetInputElementValue(prompt) {
		return `
		var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
		nativeTextAreaValueSetter.call(inputElement, \`${prompt}\`);
		var event = new Event('input', { bubbles: true});
		inputElement.dispatchEvent(event);
		`;
	}
	static codeForClickingSubmit = `
		var buttons = Array.from(document.querySelectorAll('button.ant-btn-primary'));
		var buttonsWithSvgPath = buttons.filter(button => button.querySelector('svg path'));

		var button = buttonsWithSvgPath[buttonsWithSvgPath.length - 1];

		button.click();
	`;
	static codeForExtractingResponse = `[...document.querySelectorAll('.ant-space.ant-space-horizontal .ant-typography pre')].slice(-1)[0]`; // dont append semicolon, we will append innerhtml etc

	static handleSubmit() {
		try {
			this.getWebview().executeJavaScript(`{
        var buttons = Array.from(document.querySelectorAll('button.ant-btn-primary'));
				if (buttons[0]) {
					var buttonsWithSvgPath = buttons.filter(button => button.querySelector('svg path'));

					var button = buttonsWithSvgPath[buttonsWithSvgPath.length - 1];

					button.click();
				}
		}
      `);
		} catch (e) {
			console.debug('Error in LeptonLlama.handleSubmit():', e);
		}
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			// try {
			// 	// setTimeout(() => {
			// 	// 	this.getWebview().executeJavaScript(`{
			// 	//   // Add Dark Mode
			// 	//   document.documentElement.classList.add('dark');
			// 	// }`);
			// 	// }, 100);
			// 	setTimeout(() => {
			// 		this.getWebview().executeJavaScript(`{
			// 		// Dispatch the change event manually if there are any event listeners
			// 		var event = new Event('change');
			// 		selectElement.dispatchEvent(event);
			// 	}`);
			// 	}, 1000);
			// } catch (e) {
			// 	console.debug('Error in LeptonLlama.handleCss():', e);
			// }
			setTimeout(() => {
				// hide temperature/length settings
				this.getWebview().insertCSS(`
        div.ant-col.ant-col-24.css-11zb6yo.ant-col-sm-24.ant-col-md-7.ant-col-xl-5.ant-col-xxl-4.css-lqewvt {
          display: none;
        }
		    `);
			}, 100);
		});
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = LeptonLlama;


================================================================================
FILE: src/providers/inflection.js
================================================================================

const Provider = require('./provider');

class InflectionPi extends Provider {
	static webviewId = 'webviewInflection';
	static fullName = 'Inflection Pi';
	static shortName = 'InflectionPi';

	static url = 'https://pi.ai/talk/';

	static handleInput(input) {
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea[placeholder="Talk with Pi"]');
        if (inputElement) {
					var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
					nativeTextAreaValueSetter.call(inputElement, \`${input}\`);

					var event = new Event('input', { bubbles: true});
					inputElement.dispatchEvent(event);
        }
    }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
      var inputElement = document.querySelector('textarea[placeholder="Talk with Pi"]');
			if (inputElement) {
				const event = new KeyboardEvent('keydown', {
					key: 'Enter',
					view: window,
					bubbles: true
				});
				inputElement.dispatchEvent(event);
			}
  }`);
	}
	static handleCss() {
		// this.getWebview().addEventListener('dom-ready', () => {
		// 	// Hide the "Try asking" segment
		// 	setTimeout(() => {
		// 		this.getWebview().insertCSS(`
		//     .mt-lg {
		//       display: none;
		//     }
		//     `);
		// 	}, 100);
		// });
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = InflectionPi;


================================================================================
FILE: src/providers/falcon180bspace.js
================================================================================

const Provider = require('./provider');

class Falcon180BSpace extends Provider {
	static webviewId = 'webviewFalcon180BSpace';
	static fullName = 'Falcon 180B (HF Space, temporary)';
	static shortName = 'Falcon180BSpace';

	static url = 'https://tiiuae-falcon-180b-demo.hf.space/?__theme=dark';

	static handleInput(input) {
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea[data-testid="textbox"]');
        if (inputElement) {
					var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
					nativeTextAreaValueSetter.call(inputElement, \`${input}\`);

					var event = new Event('input', { bubbles: true});
					inputElement.dispatchEvent(event);
        }
    }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
			var btn = document.querySelector('button.primary');
			if (btn) {
				btn.focus();
				btn.disabled = false;
				btn.click();
			}
  }`);
	}
	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// Hide the "Try asking" segment
			setTimeout(() => {
				this.getWebview().insertCSS(`
		    div[data-testid="markdown"] {
		      display: none;
		    }
				#banner-image {
					height: 30px;
				}
		    `);
			}, 100);
		});
	}
	static handleDarkMode(isDarkMode) {
		if (isDarkMode) {
			this.getWebview().executeJavaScript(`{
				if(document.querySelector('html').dataset.theme === 'light'){
					document.querySelector('.menu > ul > div:nth-child(2) > button').click()
      		}
		}
			`);
		} else {
			this.getWebview().executeJavaScript(`{
				if(document.querySelector('html').dataset.theme === 'business'){
					document.querySelector('.menu > ul > div:nth-child(2) > button').click()
      		}
      	}
			`);
		}
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = Falcon180BSpace;


================================================================================
FILE: src/providers/provider.js
================================================================================

// const { ipcRenderer } = require('electron');
// const log = require('electron-log');

class Provider {
	static webviewId = '';

	static getWebview() {
		// log('Provider.getWebview()', document.getElementById(this.webviewId));
		return document.getElementById(this.webviewId);
	}

	static url = '';

	static paneId() {
		return `${this.name.toLowerCase()}Pane`;
	}

	static setupCustomPasteBehavior() {
		this.getWebview().addEventListener('dom-ready', () => {
			this.getWebview().executeJavaScript(`{
					document.addEventListener('paste', (event) => {
					event.preventDefault();
					var text = event.clipboardData.getData('text');
					var activeElement = document.activeElement;

					// sometimes the active element needs  a "wake up" before paste (swyx: not entirely sure this works...)
					// Create a KeyboardEvent
					var event = new KeyboardEvent('keydown', {
						key: ' ',
						code: 'Space',
						which: 32,
						keyCode: 32,
						bubbles: true
					});

					// Dispatch the event to the active element
					activeElement.dispatchEvent(event);

					var start = activeElement.selectionStart;
					var end = activeElement.selectionEnd;
					activeElement.value = activeElement.value.slice(0, start) + text + activeElement.value.slice(end);
					activeElement.selectionStart = activeElement.selectionEnd = start + text.length;
					});
				}`);
		});
	}

	static handleInput(input) {
		throw new Error(`Provider ${this.name} must implement handleInput()`);
	}

	static handleSubmit() {
		throw new Error(`Provider ${this.name} must implement handleSubmit()`);
	}

	static handleCss() {
		throw new Error(`Provider ${this.name} must implement handleCss()`);
	}

	// Some providers will have their own dark mode implementation
	static handleDarkMode(isDarkMode) {
		// Implement dark or light mode using prodiver-specific code
		if (isDarkMode) {
			this.getWebview().executeJavaScript(`{
				document.documentElement.classList.add('dark');
				document.documentElement.classList.remove('light');
			}`);
		} else {
			this.getWebview().executeJavaScript(`{
				document.documentElement.classList.add('light');
				document.documentElement.classList.remove('dark');
			}`);
		}
	}

	static getUserAgent() {
		return 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36';
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`);
	}

	static setEnabled(state) {
		window.electron.electronStore.set(`${this.webviewId}Enabled`, state);
	}
}

module.exports = Provider;


================================================================================
FILE: src/providers/vercel.js
================================================================================

const Provider = require('./provider');

class Vercel extends Provider {
	static webviewId = 'webviewVercelAI';
	static fullName = 'Vercel AI Chatbot';
	static shortName = 'Vercel';

	static url = 'https://chat.vercel.ai/';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea[placeholder*="Send a message."]'); // can be "Ask anything" or "Ask follow-up"
        if (inputElement) {
					var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
					nativeTextAreaValueSetter.call(inputElement, \`${input}\`);

					var event = new Event('input', { bubbles: true});
					inputElement.dispatchEvent(event);
        }
    }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
    var buttons = Array.from(document.querySelectorAll('button[type="submit"]'));
		if (buttons[0]) {
			var buttonsWithSrOnly = buttons.filter(button => {
				var span = button.querySelector('span');
				return span && span.textContent.trim() === 'Send message';
			});

			if (buttonsWithSrOnly.length == 1){
				var button = buttonsWithSrOnly[0];
				button.click();
			}
		}
  }`);
	}
	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// Hide the "Try asking" segment
			setTimeout(() => {
				this.getWebview().insertCSS(`
        .mt-lg {
          display: none;
        }
		    `);
			}, 100);
		});
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = Vercel;


================================================================================
FILE: src/providers/bard.js
================================================================================

const Provider = require('./provider');

class Bard extends Provider {
	static webviewId = 'webviewBARD';
	static fullName = 'Google Bard';
	static shortName = 'Bard';

	static url = 'https://bard.google.com';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`{
      var inputElement = document.querySelector(".ql-editor.textarea");
      if (inputElement) {
        const inputEvent = new Event('input', { bubbles: true });
        inputElement.value = \`${input}\`; // must be escaped backticks to support multiline
        inputElement.dispatchEvent(inputEvent);
        // bard is weird
        inputElement.querySelector('p').textContent = \`${input}\`
      }
    }
      `);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
      var btn = document.querySelector("button[aria-label*='Send message']");
      if (btn) {
        btn.setAttribute("aria-disabled", "false"); // doesnt work alone
        btn.focus();
        btn.click();
      }
    }`);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			this.getWebview().insertCSS(`
          .chat-history, .conversation-container, .input-area, .mdc-text-area {
            margin: 0 !important;
          }
          /* hide the bard greeting */
          response-container {
                display: none;
          }
          model-response response-container {
                display: block !important;
          }
          /* hide header and footer - disabled for now https://github.com/smol-ai/GodMode/issues/202
          .gmat-caption {
            opacity: 0;
            height: 0;
          }
          header {
            display: none !important;
          }
          header + div {
            display: none !important;
          }
          */

          .capabilities-disclaimer {
            display: none !important;
          }
          .input-area-container .input-area {
            padding: 0;
          }
          /* hide the bard avatar in response */
          .logo-gutter {
            display: none !important;
          }
        `);
		});
	}

	static handleDarkMode(isDarkMode) {
		// Toggle the dark mode setting in the store
		window.electron.electronStore.set('isDarkMode', isDarkMode);

		if (isDarkMode) {
			this.getWebview().executeJavaScript(`{
        document.querySelector('body').classList.add('dark-theme');
        document.querySelector('body').classList.remove('light-theme');
      }`);
		} else {
			this.getWebview().executeJavaScript(`{
        document.querySelector('body').classList.add('light-theme');
        document.querySelector('body').classList.remove('dark-theme');
      }`);
		}
	}

	static getUserAgent() {
		// bard does not accept Electron mentions.
		// also must be realistic UA string, not just "Chrome", or this happens https://github.com/smol-ai/GodMode/pull/231
		return 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36';
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = Bard;


================================================================================
FILE: src/providers/huggingchat.js
================================================================================

const Provider = require('./provider');

class HuggingChat extends Provider {
	static webviewId = 'webviewHuggingChat';
	static fullName = 'HuggingChat (Llama2, OpenAssistant)';
	static shortName = 'HuggingChat';

	static url = 'https://huggingface.co/chat/';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`
        var inputElement = document.querySelector('textarea[placeholder*="Ask anything"]');
        if (inputElement) {
          const inputEvent = new Event('input', { bubbles: true });
          inputElement.value = \`${input}\`; // must be escaped backticks to support multiline
          inputElement.dispatchEvent(inputEvent);
        }
      `);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`
        var btn = document.querySelector('form.relative > div > button[type="submit"]');
        if (btn) {
          btn.click();
        }
      `);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			setTimeout(() => {
				this.getWebview().executeJavaScript(`
          // Hide Examples Box
          var elements = Array.from(document.querySelectorAll('div[class]'));
          var targetElement;

          for (var i = 0; i < elements.length; i++) {
              var classes = elements[i].className.split(' ');
              if (classes.includes('lg:col-span-3') && classes.includes('lg:mt-12') && elements[i].textContent.includes('Examples')) {
                  targetElement = elements[i];
                  break;
              }
          }

          if (targetElement) {
            targetElement.style.display = 'none';
          }

          // Hide HuggingChat Logo
          var elements = Array.from(document.querySelectorAll('div object'));

          elements.forEach(element => {
            if (element.parentElement.textContent.includes('HuggingChat')) {
              element.parentElement.parentElement.style.display = 'none';
            }
          });

          // Same loop for the other text.
          var pElements = Array.from(document.querySelectorAll('p'));

          pElements.forEach(element => {
            if (element.textContent.includes('Examples')) {
              element.parentElement.style.display = 'none';
            }
          });


          `);
			}, 100);
		});
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = HuggingChat;


================================================================================
FILE: src/providers/together.js
================================================================================

const Provider = require('./provider');

class Together extends Provider {
	static webviewId = 'webviewTOGETHER';
	static fullName = 'Together (RedPajama, StarCoder, Falcon, etc)';
	static shortName = 'Together';

	static url = 'https://api.together.xyz/playground/chat';

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`{
			var inputElement = document.querySelector('form textarea[placeholder*="Enter text here"]');
			if (inputElement) {
				var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
				nativeTextAreaValueSetter.call(inputElement, \`${input}\`);
				var event = new Event('input', { bubbles: true});
				inputElement.dispatchEvent(event);
			}
    }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
    var btn = document.querySelector('button[data-cy="run-inference-button"]'); // YES we are using the has selector!!!!
		if (btn) {
			btn.focus();
			btn.disabled = false;
			btn.click()
		}
  }`);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			setTimeout(() => {
				this.getWebview().insertCSS(`
		    header, header + div {
		      background-color: white;
		      /* single line dark mode ftw */
		      filter: invert(100%) hue-rotate(180deg);
		    }
        header {
          height: 10px;
          margin-top: -5px;
          padding-top: 0px;
          padding-bottom: 0px;
        }
        /* the "chat" header is pretty big */
        .mui-style-qe6v0i {
          padding-top: 0px;
        }
        div + h1, h1, h1 + div {
          display: none;
        }
		    `);
			}, 100);
		});
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = Together;


================================================================================
FILE: src/providers/openai.js
================================================================================

const Provider = require('./provider');

class OpenAI extends Provider {
	static webviewId = 'webviewOAI';
	static fullName = 'OpenAI ChatGPT';
	static shortName = 'ChatGPT';

	static url = 'https://chat.openai.com/?model=gpt-4-code-interpreter'; // TODO - let people switch

	static handleInput(input) {
		const fullName = this.fullName;
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('#prompt-textarea');
        if (inputElement) {
          const inputEvent = new Event('input', { bubbles: true });
          inputElement.value = \`${input}\`; // must be escaped backticks to support multiline
          inputElement.dispatchEvent(inputEvent);
        }
      }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
        // var btn = document.querySelector("textarea[placeholder*='Send a message']+button"); // this one broke recently .. note that they add another div (for the file upload) in code interpreter mode
        var btn = document.querySelector('button[data-testid="send-button"]');
        if (btn) {
            btn.focus();
            btn.disabled = false;
            btn.click();
        }
    }
      `);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			this.getWebview().insertCSS(`
        body {
          scrollbar-width: none;
        }
        .text-xs.text-center {
            opacity: 0;
            height: 0;
            margin-bottom: -10px;
          }

          [class*="shared__Wrapper"] {
            align-items: center;
            justify-content: center;
            text-align: center;
            margin-top: 15vh;
          }

          [class*="shared__Wrapper"] h3 {
            margin-top: -40px;
            font-size: 20px;
          }


        `);
		});
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, true);
	}
}

module.exports = OpenAI;


================================================================================
FILE: src/providers/oobabooga.js
================================================================================

const Provider = require('./provider');

class OobaBooga extends Provider {
	static webviewId = 'webviewOoba';
	static fullName = 'Local Models (OobaBooga)';
	static shortName = 'Oobabooga';

	static url = 'http://127.0.0.1:7860/';

	// todo: let user customize their preferred template.
	static templateFn = (input) => `Common sense questions and answers

  Question: ${input}
  Factual answer:`;

	static handleInput(input) {
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('#main textarea');
        if (inputElement) {
          const inputEvent = new Event('input', { bubbles: true });
          inputElement.value = \`${this.templateFn(
						input,
					)}\`; // must be escaped backticks to support multiline
          inputElement.dispatchEvent(inputEvent);
        }
      }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
			var btn = document.querySelector("button.primary")
			if (btn) {
				btn.focus();
				btn.disabled = false;
				btn.click();
			}
    }`);
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			this.getWebview().insertCSS(`
      `);
		});
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = OobaBooga;


================================================================================
FILE: src/providers/perplexity-labs.js
================================================================================

const Provider = require('./provider');

class PerplexityLabs extends Provider {
	static webviewId = 'webiewPerplexityLabs';
	static fullName = 'Perplexity Labs (Llama, Mistral)';
	static shortName = 'Perplexity-Labs';

	static url = 'https://labs.perplexity.ai/';

	static handleInput(input) {
		try {
			this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea[placeholder*="Ask"]'); // can be "Ask anything" or "Ask follow-up"
        if (inputElement) {
					var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
					nativeTextAreaValueSetter.call(inputElement, \`${input}\`);
					var event = new Event('input', { bubbles: true});
					inputElement.dispatchEvent(event);
        }
		}`);
		} catch (e) {
			console.debug('Error in PerplexityLabs.handleInput():', e);
		}
	}

	static codeForInputElement = `var inputElement = document.querySelector('textarea[placeholder*="Ask"]');`;
	static codeForSetInputElementValue(prompt) {
		return `
		var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
		nativeTextAreaValueSetter.call(inputElement, \`${prompt}\`);
		var event = new Event('input', { bubbles: true});
		inputElement.dispatchEvent(event);
		`;
	}
	static codeForClickingSubmit = `
		var buttons = Array.from(document.querySelectorAll('button.bg-super'));
		var buttonsWithSvgPath = buttons.filter(button => button.querySelector('svg path'));

		var button = buttonsWithSvgPath[buttonsWithSvgPath.length - 1];

		button.click();
	`;
	static codeForExtractingResponse = `[...document.querySelectorAll('.default.font-sans.text-base.text-textMain .prose')].slice(-1)[0]`; // dont append semicolon, we will append innerhtml etc

	static handleSubmit() {
		try {
			this.getWebview().executeJavaScript(`{
        var buttons = Array.from(document.querySelectorAll('button.bg-super'));
				if (buttons[0]) {
					var buttonsWithSvgPath = buttons.filter(button => button.querySelector('svg path'));
					var button = buttonsWithSvgPath[buttonsWithSvgPath.length - 1];
					button.click();
				}
		}
      `);
		} catch (e) {
			console.debug('Error in PerplexityLabs.handleSubmit():', e);
		}
	}

	static handleCss() {
		this.getWebview().addEventListener('dom-ready', () => {
			// hide message below text input, sidebar, suggestions on new chat
			try {
				setTimeout(() => {
					this.getWebview().executeJavaScript(`{
          // Add Dark Mode
          document.documentElement.classList.add('dark');
				}`);
				}, 100);
				setTimeout(() => {
					this.getWebview().executeJavaScript(`{
          // pick llama 70b
					var selectElement = document.querySelector('#lamma-select');
					selectElement.value = 'llama-2-70b-chat';
					// Dispatch the change event manually if there are any event listeners
					var event = new Event('change');
					selectElement.dispatchEvent(event);
				}`);
				}, 1000);
			} catch (e) {
				console.debug('Error in PerplexityLabs.handleCss():', e);
			}
			// Hide the "Try asking" segment
			setTimeout(() => {
				this.getWebview().insertCSS(`
        .mt-lg {
          display: none;
        }
		    `);
			}, 100);
		});
	}

	static getUserAgent() {
		'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36';
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = PerplexityLabs;


================================================================================
FILE: src/providers/stablechat.js
================================================================================

const Provider = require('./provider');

class StableChat extends Provider {
	static webviewId = 'webviewStableChat';
	static fullName = 'Stable Chat (Stability AI)';
	static shortName = 'StableChat';

	static url = 'https://chat.stability.ai';

	static handleInput(input) {
		this.getWebview().executeJavaScript(`{
        var inputElement = document.querySelector('textarea[placeholder="Type something here..."]');
        if (inputElement) {
					var nativeTextAreaValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
					nativeTextAreaValueSetter.call(inputElement, \`${input}\`);

					var event = new Event('input', { bubbles: true});
					inputElement.dispatchEvent(event);
        }
    }`);
	}

	static handleSubmit() {
		this.getWebview().executeJavaScript(`{
			var btn = document.querySelector('textarea[placeholder="Type something here..."] + button');
			if (btn) {
				btn.focus();
				btn.disabled = false;
				btn.click();
			}
  }`);
	}
	static handleCss() {
		// this.getWebview().addEventListener('dom-ready', () => {
		// 	// Hide the "Try asking" segment
		// 	setTimeout(() => {
		// 		this.getWebview().insertCSS(`
		//     .mt-lg {
		//       display: none;
		//     }
		//     `);
		// 	}, 100);
		// });
	}
	static handleDarkMode(isDarkMode) {
		if (isDarkMode) {
			this.getWebview().executeJavaScript(`{
				if(document.querySelector('html').dataset.theme === 'light'){
					document.querySelector('.menu > ul > div:nth-child(2) > button').click()
      		}
		}
			`);
		} else {
			this.getWebview().executeJavaScript(`{
				if(document.querySelector('html').dataset.theme === 'business'){
					document.querySelector('.menu > ul > div:nth-child(2) > button').click()
      		}
      	}
			`);
		}
	}

	static isEnabled() {
		return window.electron.electronStore.get(`${this.webviewId}Enabled`, false);
	}
}

module.exports = StableChat;


================================================================================
FILE: src/components/pane.tsx
================================================================================

import { Button } from 'renderer/components/ui/button';
import {
	Dialog,
	DialogXContent,
	DialogHeader,
	DialogTitle,
} from 'renderer/components/ui/dialog';
import { ProviderInterface } from 'lib/types';
import { CmdOrCtrlKey } from 'lib/utils';
import React from 'react';
import {
	ArrowLeftIcon,
	ArrowRightIcon,
	ReloadIcon,
	ResetIcon,
	ZoomInIcon,
	ZoomOutIcon,
	MagnifyingGlassIcon,
} from '@radix-ui/react-icons';
import { Input } from 'renderer/components/ui/input';
import {
	Tooltip,
	TooltipContent,
	TooltipProvider,
	TooltipTrigger,
} from 'renderer/components/ui/tooltip';

export default function Pane({
	provider,
	number,
	currentlyOpenPreviewPane,
	setOpenPreviewPane,
}: {
	provider: ProviderInterface;
	number: number;
	currentlyOpenPreviewPane: number;
	setOpenPreviewPane: (num: number) => void;
}) {
	const isPreviewOpen = currentlyOpenPreviewPane === number;
	const contentRef = React.useRef<HTMLDivElement>(null);

	const [shownUrl, setShownUrl] = React.useState(null);
	// this did not work not sure why
	// set a timer effect every second to check if the webview is can go back
	React.useEffect(() => {
		const interval = setInterval(() => {
			// @ts-ignore
			const newUrl = provider.getWebview()?.src;
			if (newUrl !== shownUrl) setShownUrl(newUrl);
		}, 1000);
		return () => clearInterval(interval);
	});

	// this did not work not sure why
	// // set a timer effect every second to check if the webview is can go back
	// const [canGoBack, setCanGoBack] = React.useState(false);
	// const [canGoFwd, setCanGoFwd] = React.useState(false);
	// React.useEffect(() => {
	// 	const interval = setInterval(() => {
	// 		console.log(
	// 			'provider.getWebview()?.canGoBack()',
	// 			provider.getWebview(),
	// 			provider.getWebview()?.canGoBack()
	// 		);
	// 		// @ts-ignore
	// 		if (provider.getWebview()?.canGoBack()) {
	// 			setCanGoBack(true);
	// 		} else {
	// 			setCanGoBack(false);
	// 		}
	// 		// @ts-ignore
	// 		if (provider.getWebview()?.canGoForward()) {
	// 			setCanGoFwd(true);
	// 		} else {
	// 			setCanGoFwd(true);
	// 		}
	// 	}, 1000);
	// 	return () => clearInterval(interval);
	// });

	function XButton({ children, tooltip, onClick, className = '' }: any) {
		return (
			<TooltipProvider delayDuration={300}>
				<Tooltip>
					<TooltipTrigger asChild>
						<Button
							variant="outline"
							className={`hover:bg-gray-200 ${className}`}
							onClick={onClick}
						>
							{children}
						</Button>
					</TooltipTrigger>
					<TooltipContent side="right" className="text-white bg-black">
						<p>{tooltip}</p>
					</TooltipContent>
				</Tooltip>
			</TooltipProvider>
		);
	}

	return (
		<div key={provider.paneId()} className="page darwin group">
			<div className="hidden powerbar group-hover:block">
				<Button
					className="text-xs shadow-2xl"
					onClick={() => {
						setOpenPreviewPane(number);
						console.log('zooming in on ', provider);
						// @ts-ignore
						const zoomLevel = provider?.getWebview()?.getZoomLevel() + 2;
						// @ts-ignore
						provider.getWebview()?.setZoomLevel(zoomLevel);
					}}
					variant="ghost"
				>
					<svg
						width="15"
						height="15"
						viewBox="0 0 15 15"
						fill="none"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path
							d="M11.5 3.04999C11.7485 3.04999 11.95 3.25146 11.95 3.49999V7.49999C11.95 7.74852 11.7485 7.94999 11.5 7.94999C11.2515 7.94999 11.05 7.74852 11.05 7.49999V4.58639L4.58638 11.05H7.49999C7.74852 11.05 7.94999 11.2515 7.94999 11.5C7.94999 11.7485 7.74852 11.95 7.49999 11.95L3.49999 11.95C3.38064 11.95 3.26618 11.9026 3.18179 11.8182C3.0974 11.7338 3.04999 11.6193 3.04999 11.5L3.04999 7.49999C3.04999 7.25146 3.25146 7.04999 3.49999 7.04999C3.74852 7.04999 3.94999 7.25146 3.94999 7.49999L3.94999 10.4136L10.4136 3.94999L7.49999 3.94999C7.25146 3.94999 7.04999 3.74852 7.04999 3.49999C7.04999 3.25146 7.25146 3.04999 7.49999 3.04999L11.5 3.04999Z"
							fill="currentColor"
							fillRule="evenodd"
							clipRule="evenodd"
						></path>
					</svg>{' '}
					{CmdOrCtrlKey} + {number}
				</Button>
			</div>
			<Dialog
				open={isPreviewOpen}
				onOpenChange={() => {
					setOpenPreviewPane(0);
					// zoom out when dropping out of preview
					provider
						.getWebview()
						// @ts-ignore
						.setZoomLevel(provider.getWebview().getZoomLevel() - 2);
				}}
			>
				<DialogXContent
					className="bg-white pointer-events-none"
					ref={contentRef}
				>
					<DialogHeader>
						<DialogTitle className="flex items-center justify-between pr-8">
							{provider.fullName}
							<div className="flex">
								<XButton
									tooltip={`Zoom in`} //: ${CmdOrCtrlKey} + =`}
									onClick={() => {
										provider
											.getWebview()
											// @ts-ignore
											.setZoomLevel(provider.getWebview().getZoomLevel() + 1);
									}}
								>
									<ZoomInIcon />
								</XButton>
								<XButton
									tooltip={`Zoom out`} //: ${CmdOrCtrlKey} + -`}
									onClick={() => {
										provider
											.getWebview()
											// @ts-ignore
											.setZoomLevel(provider.getWebview().getZoomLevel() - 1);
									}}
								>
									<ZoomOutIcon />
								</XButton>
								<XButton
									tooltip={`Reset Zoom`} // : ${CmdOrCtrlKey} + 0`}
									onClick={() => {
										provider
											.getWebview()
											// @ts-ignore
											.setZoomLevel(0);
									}}
								>
									<MagnifyingGlassIcon />
								</XButton>
							</div>
							<Input type="url" value={shownUrl || ''} readOnly={true} />
							<div className="flex">
								<XButton
									tooltip={`Reload window`} // : ${CmdOrCtrlKey} + R`}
									className="mr-4"
									onClick={() => {
										const webview = provider.getWebview();
										if (typeof webview?.refresh === 'function') {
											webview?.refresh();
										} else {
											webview?.reload();
										}
									}}
								>
									<ReloadIcon />
								</XButton>
								<XButton
									tooltip={`Go Back`} // : ${CmdOrCtrlKey} + H`}
									onClick={() => {
										provider.getWebview()?.goBack();
									}}
								>
									<ArrowLeftIcon />
								</XButton>
								<XButton
									tooltip={`Go forward`} // : ${CmdOrCtrlKey} + L`}
									onClick={() => {
										provider.getWebview()?.goForward();
									}}
								>
									<ArrowRightIcon />
								</XButton>
								{provider.clearCookies && (
									<XButton
										tooltip={`Clear Cookies`}
										onClick={() => {
											provider.clearCookies();
										}}
									>
										<ResetIcon className="mr-1" /> Clear Cookies
									</XButton>
								)}
							</div>
						</DialogTitle>
					</DialogHeader>
				</DialogXContent>
			</Dialog>
			<webview
				// @ts-ignore - we need this to be here or it will not show up in electron and then the allowpopups doesnt work
				allowpopups="true"
				id={provider.webviewId}
				src={provider.url}
				className={
					isPreviewOpen
						? 'fixed pointer-events-auto left-[5%] top-[10%] z-[100] grid w-10/12 gap-4 p-2 duration-200 sm:rounded-lg rounded-xl h-[85vh]'
						: ''
				}
				useragent={
					provider.getUserAgent() ? provider.getUserAgent() : undefined
				}
			/>
		</div>
	);
}


================================================================================
FILE: src/components/sidebar.tsx
================================================================================



================================================================================
FILE: src/__tests__/App.test.tsx
================================================================================

import '@testing-library/jest-dom';
import { render } from '@testing-library/react';
import App from '../renderer/App';

describe('App', () => {
	it('should render', () => {
		expect(render(<App />)).toBeTruthy();
	});
});


================================================================================
FILE: src/lib/utils.ts
================================================================================

import { ProviderInterface } from './types';
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function getEnabledProviders(allProviders: ProviderInterface[]) {
	return allProviders.filter((provider) => provider.isEnabled());
}

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}
export function convertKeyCode(code: string) {
	return code
		.toUpperCase()
		.replace('KEY', '')
		.replace('DIGIT', '')
		.replace('NUMPAD', 'NUM')
		.replace('COMMA', ',');
}

export type ShortcutKey =
	| 'Command'
	| 'Cmd'
	| 'Control'
	| 'Ctrl'
	| 'CommandOrControl'
	| 'CmdOrCtrl'
	| 'Alt'
	| 'Option'
	| 'AltGr'
	| 'Shift'
	| 'Super'
	| 'Meta';

export const modifierKeys: Set<ShortcutKey> = new Set([
	'Command',
	'Control',
	'Cmd',
	'Ctrl',
	'CmdOrCtrl',
	'CommandOrControl',
	'Alt',
	'Option',
	'AltGr',
	'Shift',
	'Super',
	'Meta',
]);

export function convertModifierKey(key: ShortcutKey | string): string {
	const shortcuts: Record<ShortcutKey, string> = {
		Command: CmdOrCtrlKey,
		Cmd: CmdOrCtrlKey,
		CmdOrCtrl: CmdOrCtrlKey,
		CommandOrControl: CmdOrCtrlKey,
		Control: 'Ctrl',
		Ctrl: 'Ctrl',
		Alt: 'Alt',
		Option: 'Option',
		AltGr: 'AltGr',
		Shift: 'Shift',
		Super: 'CmdOrCtrl',
		Meta: 'CmdOrCtrl',
	};

	const result = shortcuts[key as ShortcutKey] || key;
	return result;
}

// Iterate through shortcut array and confirm there is at least 1 modifier
// and no more than 1 non-modifier key

export function isValidShortcut(...keys: (string | string[])[]): boolean {
	// Track the count of modifier and non-modifier keys
	let modifierCount = 0;
	let nonModifierCount = 0;
	let shiftCount = 0; // Track the count of shift keys

	const shortcut = keys.flatMap((value) =>
		typeof value === 'string' ? value.split('+') : value.flat(),
	);

	shortcut.forEach((key) => {
		if (key === 'Shift') {
			shiftCount++;
		} else if (modifierKeys.has(key as ShortcutKey)) {
			modifierCount++;
		} else {
			nonModifierCount++;
		}
	});

	return modifierCount >= 1 && nonModifierCount === 1; // Modify this based on the specific rules for a valid shortcut
}

// This is here to avoid a circular dependency in constants.ts
export const CmdOrCtrlKey = getCurrentPlatform() === 'mac' ? 'Cmd' : 'Ctrl';

export function getCurrentPlatform(): string {
	const platform = (
		typeof process !== 'undefined' ? process.platform : navigator.platform
	) // navigator.platform is technically deprecated, but still works
		.toLowerCase();
	if (['darwin', 'macintel'].includes(platform)) {
		return 'mac';
	} else if (platform === 'win32') {
		return 'win';
	} else {
		return 'linux';
	}
}


================================================================================
FILE: src/lib/types.ts
================================================================================

import Provider from 'providers/provider';

export interface ProviderInterface {
	new (): Provider;
	fullName: string;
	shortName: string;
	webviewId: string;
	getWebview(): HTMLElement | null;
	url: string;
	paneId(): string;
	setupCustomPasteBehavior(): void;
	handleInput(input: string): void;
	handleSubmit(input?: string): void;
	handleCss(): void;
	handleDarkMode(bool: boolean): void;
	getUserAgent(): string;
	isEnabled(): boolean;
	setEnabled(enabled: boolean): void;
	clearCookies?(): void;

	codeForInputElement?: string;
	codeForSetInputElementValue?(prompt: string): void;
	codeForClickingSubmit?: string;
	codeForExtractingResponse?: string;
}

export interface Settings {
	getGlobalShortcut: () => Promise<string>;
	setGlobalShortcut: (shortcut: string) => Promise<boolean>;
	getFocusSuperprompt: () => Promise<boolean>;
	setFocusSuperprompt: (state: boolean) => Promise<boolean>;
	getPlatform: () => Promise<string>;
}

// Tell typescript that the window object has a property called settings
declare global {
	interface Window {
		settings: Settings;
	}
}


================================================================================
FILE: src/lib/constants.ts
================================================================================

import Bard from '../providers/bard';
import Bing from '../providers/bing';
import Claude from '../providers/claude';
import Claude2 from '../providers/claude2';
import HuggingChat from '../providers/huggingchat';
import OobaBooga from '../providers/oobabooga';
import OpenAi from '../providers/openai';
import Perplexity from '../providers/perplexity';
import YouChat from '../providers/you';
import PerplexityLlama from '../providers/perplexity-labs.js';
import LeptonLlama from '../providers/lepton-llama.js';
import Phind from '../providers/phind';
import Smol from '../providers/smol';
import Together from '../providers/together';
import Vercel from 'providers/vercel';
import OpenRouter from '../providers/openrouter';
import Poe from 'providers/poe';
import InflectionPi from 'providers/inflection';
import StableChat from 'providers/stablechat';
import Falcon180BSpace from 'providers/falcon180bspace';

export const allProviders = [
	OpenAi,
	Bard,
	Bing,
	Claude,
	Claude2,
	YouChat,
	Perplexity,
	Phind,
	Poe,
	InflectionPi,
	HuggingChat,
	StableChat,
	Falcon180BSpace,
	OobaBooga,
	Together,
	OpenRouter,
	PerplexityLlama,
	LeptonLlama,
	Vercel,
	Smol,
];


================================================================================
FILE: src/main/main.ts
================================================================================

/* eslint global-require: off, no-console: off, promise/always-return: off */

/**
 * This module executes inside of electron's main process. You can start
 * electron renderer process from here and communicate with the other processes
 * through IPC.
 *
 * When running `npm run build` or `npm run build:main`, this file is compiled to
 * `./src/main.js` using webpack. This gives us some performance wins.
 */
import path from 'path';

import {
	app,
	BrowserWindow,
	shell,
	screen,
	ipcMain,
	globalShortcut,
	Event,
} from 'electron';
import { autoUpdater } from 'electron-updater';
import log from 'electron-log';
import Store from 'electron-store';
import MenuBuilder from './menu';
import { streamChatResponse } from './apify';
import { resolveHtmlPath } from './util';
import { isValidShortcut } from '../lib/utils';
import PerplexityLlama from '../providers/perplexity-labs';
import contextMenu from 'electron-context-menu';

let store = new Store();

class AppUpdater {
	constructor() {
		log.transports.file.level = 'info';
		autoUpdater.logger = log;
		autoUpdater.checkForUpdatesAndNotify();
	}
}

let mainWindow: BrowserWindow | null = null;

store.reset();

ipcMain.on('ipc-example', async (event, arg) => {
	const msgTemplate = (pingPong: string) => `IPC test: ${pingPong}`;
	console.log(msgTemplate(arg));
	event.reply('ipc-example', msgTemplate('pong'));
});

ipcMain.on('electron-store-get', async (event, val, defaultVal) => {
	event.returnValue = store.get(val, defaultVal);
});

ipcMain.on('electron-store-set', async (event, property, val) => {
	store.set(property, val);
});

ipcMain.on('reload-browser', async (event, property, val) => {
	mainWindow?.reload();
});

ipcMain.on('set-always-on-top', async (event, newVal) => {
	mainWindow?.setAlwaysOnTop(newVal);
});
ipcMain.on('get-always-on-top', async (event, property, val) => {
	const bool = mainWindow?.isAlwaysOnTop();
	event.returnValue = bool;
});

const appFolder = path.dirname(process.execPath);
const updateExe = path.resolve(appFolder, '..', 'Update.exe');
const exeName = path.basename(process.execPath);

ipcMain.on('enable-open-at-login', async (event, property, val) => {
	app.setLoginItemSettings({
		openAtLogin: true,
		path: updateExe,
		args: [
			'--processStart',
			`"${exeName}"`,
			'--process-start-args',
			`"--hidden"`,
		],
	});
});

ipcMain.on('disable-open-at-login', async (event, property, val) => {
	app.setLoginItemSettings({
		openAtLogin: false,
		path: updateExe,
		args: [
			'--processStart',
			`"${exeName}"`,
			'--process-start-args',
			`"--hidden"`,
		],
	});
});

ipcMain.handle('get-open-at-login', () => {
	const openAtLogin = app.getLoginItemSettings().openAtLogin;
	console.log(openAtLogin);
	return openAtLogin;
});

ipcMain.on('prompt-hidden-chat', async (event, channel: string, prompt) => {
	const sendFn = (...args: any[]) =>
		mainWindow?.webContents.send(channel, ...args);
	const done = await streamChatResponse({
		provider: PerplexityLlama,
		prompt,
		sendFn,
	});
	event.returnValue = done; // {responseHTML, responseText}
});

/*
 * Return the user's device platform (macOS, Windows, Linux) for use in
 * keyboard shortcuts and other platform-specific features in the renderer.
 */
ipcMain.handle('get-platform', () => {
	return process.platform;
});

// ipcMain.on('open-settings-window', () => {
//   createSettingsWindow();
// });

if (process.env.NODE_ENV === 'production') {
	const sourceMapSupport = require('source-map-support');
	sourceMapSupport.install();
}

const isDebug =
	process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';

if (isDebug) {
	require('electron-debug')();
}

const installExtensions = async () => {
	const installer = require('electron-devtools-installer');
	const forceDownload = !!process.env.UPGRADE_EXTENSIONS;
	const extensions = ['REACT_DEVELOPER_TOOLS'];

	return installer
		.default(
			extensions.map((name) => installer[name]),
			forceDownload,
		)
		.catch(console.log);
};

const createWindow = async () => {
	if (isDebug) {
		await installExtensions();
	}

	const RESOURCES_PATH = app.isPackaged
		? path.join(process.resourcesPath, 'assets')
		: path.join(__dirname, '../../assets');

	const getAssetPath = (...paths: string[]): string => {
		return path.join(RESOURCES_PATH, ...paths);
	};

	let { width, height } = screen.getPrimaryDisplay().workAreaSize;

	const preload = app.isPackaged
		? path.join(__dirname, 'preload.js')
		: path.join(__dirname, '../../scripts/dll/preload.js');

	mainWindow = new BrowserWindow({
		show: false,
		// frame: false,
		titleBarStyle: 'hidden',
		width: width - 100,
		height: height - 100,
		icon: getAssetPath('icon.png'),
		// alwaysOnTop: true,
		webPreferences: {
			webviewTag: true,
			nodeIntegration: true,
			preload,
		},
	});

	const nativeImage = require('electron').nativeImage;
	const dockIcon = nativeImage.createFromPath(getAssetPath('icon.png'));

	app.dock?.setIcon(dockIcon); // todo: if electronStore preferences say to hide icon, hide icon with app.dock.setMenu(Menu.buildFromTemplate([])); maybe https://stackoverflow.com/questions/59668664/how-to-avoid-showing-a-dock-icon-while-my-electron-app-is-launching-on-macos
	app.name = 'God Mode';

	mainWindow.loadURL(resolveHtmlPath('index.html'));

	mainWindow.on('ready-to-show', () => {
		if (!mainWindow) {
			throw new Error('"mainWindow" is not defined');
		}
		if (process.env.START_MINIMIZED) {
			mainWindow.minimize();
		} else {
			mainWindow.show();
		}
	});

	mainWindow.on('close', (event: Event) => {
		event.preventDefault();
		mainWindow?.destroy();
	});

	app.on('activate', () => {
		if (mainWindow === null) createWindow();
	});

	const menuBuilder = new MenuBuilder(mainWindow);
	menuBuilder.buildMenu();

	// Remove this if your app does not use auto updates
	// eslint-disable-next-line
	new AppUpdater();
};

/**
 * Add event listeners...
 */

app.on('window-all-closed', () => {
	// Respect the OSX convention of having the application in memory even
	// after all windows have been closed
	if (process.platform !== 'darwin') {
		app.quit();
	}
});

app.on('web-contents-created', (event, contents) => {
	// Enable context menu to debug webviews
	if (contents.getType() === 'webview') {
		contextMenu({
			window: contents,
			showInspectElement: true,
		});
	}

	const domainallowlist = [
		'https://accounts.google.com',
		'https://login.live.com',
	];
	contents.setWindowOpenHandler(({ url }) => {
		// return allow if url starts with domainallowlist member. for SSO
		if (domainallowlist.some((domain) => url.startsWith(domain))) {
			return { action: 'allow' };
		}
		// Open all external urls in the user's browser
		setImmediate(() => {
			shell.openExternal(url);
		});
		return { action: 'deny' };
	});
});

app.on('web-contents-created', (e, contents) => {
	if (contents.getType() == 'webview') {
		// contents.on("will-navigate", (event, url, frameName, disposition, options, additionalFeatures) => {
		//   console.log({frameName})
		//   if (frameName === 'my_popup') {
		//     // Open `url` in a new window...
		//     event.preventDefault()
		//     Object.assign(options, {
		//       parent: win,
		//       width: 500,
		//       height: 400
		//     })
		//     event.newGuest = new BrowserWindow(options)
		//   }
		// })
		// // set context menu in webview
		// contextMenu({
		//   window: contents,
		// });

		// we can't set the native app menu with "menubar" so need to manually register these events
		// register cmd+c/cmd+v events
		contents.on('before-input-event', (event, input) => {
			const { control, meta, key } = input;
			if (!control && !meta) return;
			if (key === 'c') contents.copy();
			if (key === 'x') contents.cut();
			// if (key === "v") contents.paste(); // we will handle this manually
			if (key === 'a') contents.selectAll();
			if (key === 'z') contents.undo();
			if (key === 'y') contents.redo();
			if (key === 'q') app.quit();
			if (key === 'r') contents.reload();
			if (key === 'h') contents.goBack();
			if (key === 'l') contents.goForward();
		});
	}
});

const gotTheLock = app.requestSingleInstanceLock();
if (!gotTheLock) {
	app.quit();
} else {
	app.on(
		'second-instance',
		(event, commandLine, workingDirectory, additionalData) => {
			// Someone tried to run a second instance, we should focus our window.
			if (mainWindow) {
				if (mainWindow.isMinimized()) mainWindow.restore();
				mainWindow.focus();
			}
		},
	);
	app
		.whenReady()
		.then(() => {
			createWindow();
			app.on('activate', () => {
				// On macOS it's common to re-create a window in the app when the
				// dock icon is clicked and there are no other windows open.
				if (mainWindow === null) createWindow();
			});
		})
		.catch(console.log);
}

/* ========================================================================== */
/* Global Shortcut Logic                                                      */
/* ========================================================================== */

/*
 * Fetch global shortcut from electron store, or default if none is set
 */
const quickOpenDefaultShortcut = store.get(
	'quickOpenShortcut',
	'CommandOrControl+Shift+G',
) as string;

const focusSuperpromptDefault = store.get('focusSuperpromptEnabled', false);

console.log(quickOpenDefaultShortcut);
console.log(isValidShortcut(quickOpenDefaultShortcut));
console.log('focus superprompt enabled', focusSuperpromptDefault);
/*
 * Update the global shortcut to one provided
 */
function changeGlobalShortcut(newShortcut: string) {
	if (!newShortcut) return;
	if (!isValidShortcut(newShortcut)) return;
	store.set('quickOpenShortcut', newShortcut);
	globalShortcut.register(newShortcut, quickOpen);
}

function setSuperpromptFocusState(state: boolean) {
	store.set('focusSuperpromptEnabled', state);
}
/*
 * Open and focus the main window
 */
function quickOpen() {
	if (mainWindow && !mainWindow.isDestroyed()) {
		if (mainWindow.isFocused()) {
			mainWindow.hide();
		} else {
			if (mainWindow.isMinimized()) {
				mainWindow.restore();
			}
			mainWindow.show();
			mainWindow.focus();
			if (store.get('focusSuperpromptEnabled') === true) {
				mainWindow.webContents.executeJavaScript(
					`{document.querySelector('#prompt')?.focus()}`,
				);
			}
		}
	} else {
		createWindow();
	}
}

/*
 * Reply to renderer process with the global shortcut
 */
ipcMain.handle('get-global-shortcut', (event) => {
	return store.get('quickOpenShortcut', 'CommandOrControl+Shift+G');
});

/*
 * Set the global shortcut to one provided
 */
ipcMain.handle('set-global-shortcut', async (event, shortcut: string) => {
	if (!shortcut) return false;
	changeGlobalShortcut(shortcut);
	return true;
});

ipcMain.handle('get-focus-superprompt', () => {
	return store.get('focusSuperpromptEnabled', false);
});

ipcMain.handle('set-focus-superprompt', async (_, state: boolean) => {
	setSuperpromptFocusState(state);
	return true;
});

app.on('ready', () => {
	/*
	 * Register global shortcut on app ready
	 */
	if (isValidShortcut(quickOpenDefaultShortcut)) {
		store.set('quickOpenShortcut', quickOpenDefaultShortcut);
		globalShortcut.register(quickOpenDefaultShortcut, quickOpen);
	}
	store.set('focusSuperpromptEnabled', focusSuperpromptDefault);

	/*
	 * Re-register global shortcut when it is changed in settings
	 * and unregister the old one
	 */
	store.onDidChange(
		'quickOpenShortcut',
		(newValue: unknown, oldValue: unknown) => {
			if (newValue === oldValue) return;
			changeGlobalShortcut(newValue as string);
		},
	);
});

app.on('will-quit', () => {
	// Unregister the global shortcut
	globalShortcut.unregisterAll();
});


================================================================================
FILE: src/main/menu.ts
================================================================================

import {
	app,
	Menu,
	shell,
	BrowserWindow,
	MenuItemConstructorOptions,
	ipcRenderer,
} from 'electron';

interface DarwinMenuItemConstructorOptions extends MenuItemConstructorOptions {
	selector?: string;
	submenu?: DarwinMenuItemConstructorOptions[] | Menu;
}

function openSettingsWindow() {
	ipcRenderer.send('open-settings-window');
}

export default class MenuBuilder {
	mainWindow: BrowserWindow;

	constructor(mainWindow: BrowserWindow) {
		this.mainWindow = mainWindow;
	}

	buildMenu(): Menu {
		if (
			process.env.NODE_ENV === 'development' ||
			process.env.DEBUG_PROD === 'true'
		) {
			this.setupDevelopmentEnvironment();
		}

		const template =
			process.platform === 'darwin'
				? this.buildDarwinTemplate()
				: this.buildDefaultTemplate();

		const menu = Menu.buildFromTemplate(template);
		Menu.setApplicationMenu(menu);

		return menu;
	}

	setupDevelopmentEnvironment(): void {
		this.mainWindow.webContents.on('context-menu', (_, props) => {
			const { x, y } = props;

			Menu.buildFromTemplate([
				{
					label: 'Inspect element',
					click: () => {
						this.mainWindow.webContents.inspectElement(x, y);
					},
				},
			]).popup({ window: this.mainWindow });
		});
	}

	buildDarwinTemplate(): MenuItemConstructorOptions[] {
		const subMenuAbout: DarwinMenuItemConstructorOptions = {
			label: 'God Mode',
			submenu: [
				{
					label: 'About God Mode',
					selector: 'orderFrontStandardAboutPanel:',
				},
				{ type: 'separator' },
				{ label: 'Services', submenu: [] },
				{ type: 'separator' },
				{
					label: 'Hide God Mode',
					accelerator: 'Command+H',
					selector: 'hide:',
				},
				{
					label: 'Hide Others',
					accelerator: 'Command+Shift+H',
					selector: 'hideOtherApplications:',
				},
				{ label: 'Show All', selector: 'unhideAllApplications:' },
				{ type: 'separator' },
				{
					label: 'Quit',
					accelerator: 'Command+Q',
					click: () => {
						app.quit();
					},
				},
			],
		};
		const subMenuEdit: DarwinMenuItemConstructorOptions = {
			label: 'Edit',
			submenu: [
				{ label: 'Undo', accelerator: 'Command+Z', selector: 'undo:' },
				{ label: 'Redo', accelerator: 'Shift+Command+Z', selector: 'redo:' },
				{ type: 'separator' },
				{ label: 'Cut', accelerator: 'Command+X', selector: 'cut:' },
				{ label: 'Copy', accelerator: 'Command+C', selector: 'copy:' },
				{ label: 'Paste', accelerator: 'Command+V', selector: 'paste:' },
				{
					label: 'Select All',
					accelerator: 'Command+A',
					selector: 'selectAll:',
				},
			],
		};
		const subMenuViewDev: MenuItemConstructorOptions = {
			label: 'View',
			submenu: [
				{
					label: 'Reload',
					accelerator: 'Command+R',
					click: () => {
						this.mainWindow.webContents.reload();
					},
				},
				{
					label: 'Toggle Full Screen',
					accelerator: 'Ctrl+Command+F',
					click: () => {
						this.mainWindow.setFullScreen(!this.mainWindow.isFullScreen());
					},
				},
				{
					label: 'Toggle Developer Tools',
					accelerator: 'Alt+Command+I',
					click: () => {
						this.mainWindow.webContents.toggleDevTools();
					},
				},
			],
		};
		const subMenuViewProd: MenuItemConstructorOptions = {
			label: 'View',
			submenu: [
				{
					label: 'Toggle Full Screen',
					accelerator: 'Ctrl+Command+F',
					click: () => {
						this.mainWindow.setFullScreen(!this.mainWindow.isFullScreen());
					},
				},
			],
		};
		const subMenuWindow: DarwinMenuItemConstructorOptions = {
			label: 'Window',
			submenu: [
				{
					label: 'Minimize',
					accelerator: 'Command+M',
					selector: 'performMiniaturize:',
				},
				{ label: 'Close', accelerator: 'Command+W', selector: 'performClose:' },
				{ type: 'separator' },
				{ label: 'Bring All to Front', selector: 'arrangeInFront:' },
			],
		};
		const subMenuHelp: MenuItemConstructorOptions = {
			label: 'Help',
			submenu: [
				{
					label: 'Learn More',
					click() {
						shell.openExternal('https://electronjs.org');
					},
				},
				{
					label: 'Documentation',
					click() {
						shell.openExternal(
							'https://github.com/electron/electron/tree/main/docs#readme',
						);
					},
				},
				{
					label: 'Community Discussions',
					click() {
						shell.openExternal('https://www.electronjs.org/community');
					},
				},
				{
					label: 'Search Issues',
					click() {
						shell.openExternal('https://github.com/electron/electron/issues');
					},
				},
			],
		};

		const subMenuView =
			process.env.NODE_ENV === 'development' ||
			process.env.DEBUG_PROD === 'true'
				? subMenuViewDev
				: subMenuViewProd;

		return [subMenuAbout, subMenuEdit, subMenuView, subMenuWindow, subMenuHelp];
	}

	buildDefaultTemplate() {
		const templateDefault = [
			{
				label: '&File',
				submenu: [
					{
						label: '&Open',
						accelerator: 'Ctrl+O',
					},
					{
						label: '&Close',
						accelerator: 'Ctrl+W',
						click: () => {
							this.mainWindow.close();
						},
					},
				],
			},
			{
				label: '&View',
				submenu:
					process.env.NODE_ENV === 'development' ||
					process.env.DEBUG_PROD === 'true'
						? [
								{
									label: '&Reload',
									accelerator: 'Ctrl+R',
									click: () => {
										this.mainWindow.webContents.reload();
									},
								},
								{
									label: 'Toggle &Full Screen',
									accelerator: 'F11',
									click: () => {
										this.mainWindow.setFullScreen(
											!this.mainWindow.isFullScreen(),
										);
									},
								},
								{
									label: 'Toggle &Developer Tools',
									accelerator: 'Alt+Ctrl+I',
									click: () => {
										this.mainWindow.webContents.toggleDevTools();
									},
								},
						  ]
						: [
								{
									label: 'Toggle &Full Screen',
									accelerator: 'F11',
									click: () => {
										this.mainWindow.setFullScreen(
											!this.mainWindow.isFullScreen(),
										);
									},
								},
						  ],
			},
			{
				label: 'Help',
				submenu: [
					{
						label: 'Learn More',
						click() {
							shell.openExternal('https://electronjs.org');
						},
					},
					{
						label: 'Documentation',
						click() {
							shell.openExternal(
								'https://github.com/electron/electron/tree/main/docs#readme',
							);
						},
					},
					{
						label: 'Community Discussions',
						click() {
							shell.openExternal('https://www.electronjs.org/community');
						},
					},
					{
						label: 'Search Issues',
						click() {
							shell.openExternal('https://github.com/electron/electron/issues');
						},
					},
				],
			},
		];

		return templateDefault;
	}
}


================================================================================
FILE: src/main/preload.ts
================================================================================

// Disable no-unused-vars, broken for spread args
/* eslint no-unused-vars: off */
import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron';

export type Channels = 'ipc-example' | 'perplexity-llama2';

const electronHandler = {
	ipcRenderer: {
		sendMessage(channel: Channels, ...args: unknown[]) {
			ipcRenderer.send(channel, ...args);
		},
		on(channel: Channels, func: (...args: unknown[]) => void) {
			const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>
				func(...args);
			ipcRenderer.on(channel, subscription);

			return () => {
				ipcRenderer.removeListener(channel, subscription);
			};
		},
		once(channel: Channels, func: (...args: unknown[]) => void) {
			ipcRenderer.once(channel, (_event, ...args) => func(...args));
		},
	},
	// https://gist.github.com/samcodee/d4320006d366a2c47048014644ddc375
	electronStore: {
		get(val: any, def: any) {
			const x = ipcRenderer.sendSync('electron-store-get', val, def);
			return x;
		},
		set(property: any, val: any) {
			ipcRenderer.send('electron-store-set', property, val);
		},
		// Other method you want to add like has(), reset(), etc.
	},
	browserWindow: {
		reload() {
			ipcRenderer.send('reload-browser');
		},
		getAlwaysOnTop() {
			const x = ipcRenderer.sendSync('get-always-on-top');
			return x;
		},
		setAlwaysOnTop(val: any) {
			ipcRenderer.send('set-always-on-top', val);
		},
		promptHiddenChat(prompt: string) {
			ipcRenderer.send('prompt-hidden-chat', 'perplexity-llama2', prompt);
		},
		enableOpenAtLogin(prompt: string) {
			ipcRenderer.send('enable-open-at-login');
		},
		disableOpenAtLogin(prompt: string) {
			ipcRenderer.send('disable-open-at-login');
		},
	},
};

contextBridge.exposeInMainWorld('electron', electronHandler);

contextBridge.exposeInMainWorld('settings', {
	getGlobalShortcut: () => {
		return ipcRenderer.invoke('get-global-shortcut');
	},
	setGlobalShortcut: (shortcut: string) => {
		return ipcRenderer.invoke('set-global-shortcut', shortcut);
	},
	getFocusSuperprompt: () => {
		return ipcRenderer.invoke('get-focus-superprompt');
	},
	setFocusSuperprompt: (state: boolean) => {
		return ipcRenderer.invoke('set-focus-superprompt', state);
	},
	getPlatform: () => {
		return ipcRenderer.invoke('get-platform');
	},
	getOpenAtLogin: () => {
		return ipcRenderer.invoke('get-open-at-login');
	},
});

export type ElectronHandler = typeof electronHandler;


================================================================================
FILE: src/main/util.ts
================================================================================

/* eslint import/prefer-default-export: off */
import { URL } from 'url';
import path from 'path';

export function resolveHtmlPath(htmlFileName: string) {
	if (process.env.NODE_ENV === 'development') {
		const port = process.env.PORT || 1212;
		const url = new URL(`http://localhost:${port}`);
		url.pathname = htmlFileName;
		return url.href;
	}
	return `file://${path.resolve(__dirname, '../renderer/', htmlFileName)}`;
}


================================================================================
FILE: src/main/apify.ts
================================================================================

import { ProviderInterface } from 'lib/types';
import { BrowserWindow } from 'electron';

export async function streamChatResponse(opts: {
	provider: ProviderInterface;
	prompt: string;
	sendFn: (...args: any[]) => void | undefined;
}) {
	const win = new BrowserWindow({
		// show: true,
		show: false,
		// titleBarStyle: 'hidden',
		// width: 800,
		// height: 600,
		// webPreferences: {
		// 	webviewTag: true,
		// 	nodeIntegration: true,
		// },
	});
	win.loadURL(opts.provider.url);

	return new Promise((resolve, reject) => {
		win.webContents.on('dom-ready', async () => {
			try {
				// check if logged in (and inputElement exists)
				await win.webContents.executeJavaScript(
					`{${opts.provider.codeForInputElement}}`,
				);
			} catch (err) {
				console.error(
					'input element doesnt exist: ',
					opts.provider.codeForInputElement,
				);
				return reject(err);
			}
			await timeout(500);
			const script = `{
				${opts.provider.codeForInputElement}
        ${opts.provider.codeForSetInputElementValue!(opts.prompt)}
        ${opts.provider.codeForClickingSubmit}
			}`;
			await win.webContents.executeJavaScript(script);
			console.log('script', script);

			// Define two variables to store the previous responses
			let lastResponseHTML = null;
			let secondLastResponseHTML = null;

			console.log('looping');
			// Loop until our condition is met
			await timeout(300);
			while (true) {
				await timeout(300);
				// await win.webContents.executeJavaScript(
				// 	`console.log('hiii', [...document.querySelectorAll('.default.font-sans.text-base.text-textMain .prose')]);`,
				// );
				var responseHTML = await win.webContents.executeJavaScript(
					`${opts.provider.codeForExtractingResponse}.innerHTML`,
				);
				var responseText = await win.webContents.executeJavaScript(
					`${opts.provider.codeForExtractingResponse}.innerText`,
				);

				console.log({ responseHTML, secondLastResponseHTML });
				// If responseHTML hasn't changed for 2 invocations, break
				if (
					responseHTML === lastResponseHTML &&
					responseHTML === secondLastResponseHTML
				) {
					console.log('prompting');
					break;
				}

				// Shift our stored responses for the next loop iteration
				secondLastResponseHTML = lastResponseHTML;
				lastResponseHTML = responseHTML;

				console.log('sendFn', responseText);
				opts.sendFn(responseHTML, responseText); // stream incomplete responses back
			}
			console.log('closing');
			win.close();
			return resolve({ responseHTML, responseText });
		});
	});
}
// thanks claude

function timeout(ms: number) {
	return new Promise((resolve) => setTimeout(resolve, ms));
}


================================================================================
SUMMARY: Extracted 79 files from the GodMode codebase.
